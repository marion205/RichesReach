name: Enterprise Engineering Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: enterprise-gates-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"

jobs:
  lint-and-typecheck:
    name: Lint & Typecheck (mobile if present)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Only run Node steps if mobile/package.json exists
      - name: Detect mobile app
        id: has_mobile
        run: |
          if [ -f mobile/package.json ]; then
            echo "present=true" >> $GITHUB_OUTPUT
          else
            echo "present=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node
        if: steps.has_mobile.outputs.present == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install deps (mobile)
        if: steps.has_mobile.outputs.present == 'true'
        working-directory: mobile
        run: |
          npm ci || npm install

      - name: Lint (optional if script missing)
        if: steps.has_mobile.outputs.present == 'true'
        working-directory: mobile
        run: |
          if npm run | grep -qE 'lint'; then
            npm run lint || true
          else
            echo "No 'lint' script; skipping."
          fi

      - name: Typecheck (optional if script missing)
        if: steps.has_mobile.outputs.present == 'true'
        working-directory: mobile
        run: |
          if npm run | grep -qE 'typecheck|tsc'; then
            (npm run typecheck || npm run tsc) || true
          else
            echo "No typecheck/tsc script; skipping."
          fi

  unit-tests:
    name: Python backend tests (if backend present)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Detect backend
        id: has_backend
        run: |
          if [ -f backend/pyproject.toml ] || [ -f backend/requirements.txt ] || [ -f backend/backend/requirements.txt ]; then
            echo "present=true" >> $GITHUB_OUTPUT
          else
            echo "present=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Python
        if: steps.has_backend.outputs.present == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deps
        if: steps.has_backend.outputs.present == 'true'
        run: |
          python -m pip install --upgrade pip
          if [ -f backend/requirements.txt ]; then
            pip install -r backend/requirements.txt
          elif [ -f backend/backend/requirements.txt ]; then
            pip install -r backend/backend/requirements.txt
          elif [ -f backend/backend/requirements-production.txt ]; then
            pip install -r backend/backend/requirements-production.txt
          else
            echo "No requirements file found; installing pytest only."
            pip install pytest
          fi

      - name: Run pytest (non-blocking for now)
        if: steps.has_backend.outputs.present == 'true'
        run: |
          if [ -d backend ]; then
            pytest -q backend || true
          else
            echo "No backend dir; skipping."
          fi

  database-constraints:
    name: DB constraints (optional)
    runs-on: ubuntu-latest
    continue-on-error: true
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd="pg_isready -U postgres" --health-interval=10s
          --health-timeout=5s --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install deps (best-effort)
        run: |
          python -m pip install --upgrade pip
          [ -f backend/backend/requirements.txt ] && pip install -r backend/backend/requirements.txt || true
          pip install psycopg2-binary || true
      - name: Run migrations/constraints (best-effort)
        run: |
          if [ -f backend/manage.py ]; then
            python backend/manage.py migrate || true
            python backend/manage.py check || true
          else
            echo "No Django manage.py; skipping."
          fi

  rust-service-tests:
    name: Rust services (optional)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Detect Rust workspace
        id: has_rust
        run: |
          if [ -f rust-services/Cargo.toml ] || [ -f Cargo.toml ]; then
            echo "present=true" >> $GITHUB_OUTPUT
          else
            echo "present=false" >> $GITHUB_OUTPUT
          fi
      - name: Setup Rust
        if: steps.has_rust.outputs.present == 'true'
        uses: dtolnay/rust-toolchain@stable
      - name: Cargo test
        if: steps.has_rust.outputs.present == 'true'
        run: |
          (cd rust-services && cargo test) || (cargo test) || true

  performance-tests:
    name: Performance tests (optional)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - run: echo "No perf tests configured; skipping."

  security-checks:
    name: Security checks (optional)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Bandit (Python) if backend exists
        run: |
          if [ -d backend ]; then
            pipx install bandit >/dev/null 2>&1 || python -m pip install bandit
            bandit -q -r backend || true
          else
            echo "No backend; skipping bandit."
          fi
      - name: npm audit (mobile) if present
        run: |
          if [ -f mobile/package.json ]; then
            (cd mobile && npm audit --audit-level=high) || true
          else
            echo "No mobile; skipping npm audit."
          fi

  coverage-report:
    name: Coverage (optional)
    runs-on: ubuntu-latest
    needs: [unit-tests]
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - run: echo "Coverage generation not wired yet; skipping."