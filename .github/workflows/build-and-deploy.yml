name: Build and Deploy to ECS

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag (leave empty for auto-generated)'
        required: false
        default: ''

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: riches-reach-ai
  ECS_SERVICE: riches-reach-ai-ai
  ECS_CLUSTER: riches-reach-ai-production-cluster
  ECS_TASK_FAMILY: riches-reach-ai-task
  CONTAINER_NAME: riches-reach-ai

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set image tag
      id: image-tag
      run: |
        if [ -n "${{ github.event.inputs.image_tag }}" ]; then
          echo "tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=prod-$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
        fi

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.image-tag.outputs.tag }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Verify image in ECR
      run: |
        aws ecr describe-images \
          --repository-name ${{ env.ECR_REPOSITORY }} \
          --image-ids imageTag=${{ steps.image-tag.outputs.tag }} \
          --region ${{ env.AWS_REGION }}

    - name: Create new task definition
      id: task-def
      run: |
        # Export current task definition
        aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_TASK_FAMILY }}:100 \
          --region ${{ env.AWS_REGION }} \
          --query 'taskDefinition' > td.json

        # Update image and add health check + secrets
        python3 -c "
        import json, os
        td = json.load(open('td.json'))
        
        # Remove read-only fields
        for k in ['taskDefinitionArn','revision','status','requiresAttributes',
                  'compatibilities','registeredAt','registeredBy']:
            td.pop(k, None)
        
        # Update image and add health check + secrets
        for c in td['containerDefinitions']:
            if c['name'] == '${{ env.CONTAINER_NAME }}':
                c['image'] = '${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.image-tag.outputs.tag }}'
                
                # Add health check
                c['healthCheck'] = {
                    'command': ['CMD-SHELL','curl -fsS http://localhost:8000/health/ || exit 1'],
                    'interval': 30, 'timeout': 5, 'retries': 3, 'startPeriod': 120
                }
                
                # Add secrets
                c['secrets'] = [
                    {'name': 'DJANGO_DB_ENGINE', 'valueFrom': 'arn:aws:secretsmanager:us-east-1:498606688292:secret:rr/db/appuser-PE1IS5:ENGINE::'},
                    {'name': 'DJANGO_DB_NAME', 'valueFrom': 'arn:aws:secretsmanager:us-east-1:498606688292:secret:rr/db/appuser-PE1IS5:NAME::'},
                    {'name': 'DJANGO_DB_USER', 'valueFrom': 'arn:aws:secretsmanager:us-east-1:498606688292:secret:rr/db/appuser-PE1IS5:USER::'},
                    {'name': 'DJANGO_DB_PASSWORD', 'valueFrom': 'arn:aws:secretsmanager:us-east-1:498606688292:secret:rr/db/appuser-PE1IS5:PASSWORD::'},
                    {'name': 'DJANGO_DB_HOST', 'valueFrom': 'arn:aws:secretsmanager:us-east-1:498606688292:secret:rr/db/appuser-PE1IS5:HOST::'},
                    {'name': 'DJANGO_DB_PORT', 'valueFrom': 'arn:aws:secretsmanager:us-east-1:498606688292:secret:rr/db/appuser-PE1IS5:PORT::'},
                    {'name': 'SECRET_KEY', 'valueFrom': 'arn:aws:secretsmanager:us-east-1:498606688292:secret:rr-django-secret-key-IdsacH'}
                ]
                break
        
        with open('td-new.json', 'w') as f:
            json.dump(td, f)
        "

        # Register new task definition
        TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://td-new.json \
          --region ${{ env.AWS_REGION }} \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        
        echo "task-definition-arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT
        echo "New task definition: $TASK_DEF_ARN"

    - name: Deploy to ECS
      run: |
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --task-definition ${{ steps.task-def.outputs.task-definition-arn }} \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}

    - name: Wait for deployment
      run: |
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --region ${{ env.AWS_REGION }}

    - name: Run migrations
      run: |
        TASK_ARN=$(aws ecs run-task \
          --cluster ${{ env.ECS_CLUSTER }} \
          --launch-type FARGATE \
          --count 1 \
          --task-definition ${{ steps.task-def.outputs.task-definition-arn }} \
          --network-configuration "awsvpcConfiguration={subnets=[\"subnet-037cb59936a709c87\"],securityGroups=[\"sg-007dff041138724c3\"],assignPublicIp=DISABLED}" \
          --overrides "{\"containerOverrides\":[{\"name\":\"${{ env.CONTAINER_NAME }}\",\"command\":[\"/bin/sh\",\"-lc\",\"python manage.py migrate --noinput && echo MIGRATIONS_DONE\"]}]}" \
          --region ${{ env.AWS_REGION }} \
          --query 'tasks[0].taskArn' \
          --output text)
        
        echo "Migration task started: $TASK_ARN"

    - name: Deployment Summary
      run: |
        echo "ðŸŽ‰ Deployment Complete!"
        echo "Image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.image-tag.outputs.tag }}"
        echo "Task Definition: ${{ steps.task-def.outputs.task-definition-arn }}"
        echo "Service: ${{ env.ECS_SERVICE }}"
        echo ""
        echo "To rollback if needed:"
        echo "aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --task-definition riches-reach-ai-task:100 --force-new-deployment --region ${{ env.AWS_REGION }}"
