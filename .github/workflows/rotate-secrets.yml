name: Rotate Secrets

on:
  workflow_dispatch:
    inputs:
      secret_name:
        description: "Secret logical name (e.g., polygon_api_key)"
        required: true
        type: choice
        options:
          - openai_api_key
          - polygon_api_key
          - finnhub_api_key
          - alpha_vantage_key
          - alchemy_key
          - walletconnect_id
          - newsapi_key
      new_value:
        description: "NEW secret value (paste or provided by prior job)"
        required: true
        type: string
      environment:
        description: "Environment to rotate"
        required: true
        type: choice
        options:
          - production
          - staging
        default: production

jobs:
  rotate:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Configure AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/richesreach-ci-role
        aws-region: us-east-1
    
    - name: Get Secret ARN
      id: get_secret_arn
      run: |
        SECRET_ARN=$(aws secretsmanager list-secrets \
          --filters Key=name,Values=richesreach/${{ github.event.inputs.environment }}/${{ github.event.inputs.secret_name }} \
          --query 'SecretList[0].ARN' --output text)
        echo "secret_arn=$SECRET_ARN" >> $GITHUB_OUTPUT
        echo "Secret ARN: $SECRET_ARN"
    
    - name: Stage New Secret
      run: |
        aws lambda invoke \
          --function-name richesreach-${{ github.event.inputs.environment }}-rotate-generic \
          --payload "$(jq -n \
            --arg id "${{ steps.get_secret_arn.outputs.secret_arn }}" \
            --arg val "${{ github.event.inputs.new_value }}" \
            '{SecretId:$id, CandidateValue:$val, Action:"rotate"}')" \
          /tmp/rotation_result.json
        
        cat /tmp/rotation_result.json
        
        # Check if rotation was successful
        if jq -e '.statusCode == 200' /tmp/rotation_result.json > /dev/null; then
          echo "✅ Secret rotation successful"
        else
          echo "❌ Secret rotation failed"
          exit 1
        fi
    
    - name: Verify Application Health
      run: |
        # Wait for application to pick up new secret
        sleep 30
        
        # Check application health
        HEALTH_URL="https://api.richesreach.net/health/ready"
        if curl -f -s "$HEALTH_URL" > /dev/null; then
          echo "✅ Application health check passed"
        else
          echo "❌ Application health check failed"
          exit 1
        fi
    
    - name: Create Rotation Log
      run: |
        echo "Secret rotated: ${{ github.event.inputs.secret_name }}" >> rotation.log
        echo "Environment: ${{ github.event.inputs.environment }}" >> rotation.log
        echo "Timestamp: $(date)" >> rotation.log
        echo "Rotated by: ${{ github.actor }}" >> rotation.log
