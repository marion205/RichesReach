name: Build and Deploy to ECS

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Optional image tag (default: prod-YYYYmmddHHMMSS)"
        required: false

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: "498606688292"
  ECR_REPO: riches-reach-ai
  ECR_URI: 498606688292.dkr.ecr.us-east-1.amazonaws.com/riches-reach-ai
  ECS_CLUSTER: riches-reach-ai-production-cluster
  ECS_SERVICE: riches-reach-ai-ai
  TASK_FAMILY: riches-reach-ai-task
  ROLLBACK_TD: arn:aws:ecs:us-east-1:498606688292:task-definition/riches-reach-ai-task:100

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write    # for future OIDC (safe to leave)
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- AWS auth ----------
      - name: Configure AWS (access keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # ---------- Buildx multi-arch ----------
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Compute image tag
        id: tag
        run: |
          if [ -n "${{ github.event.inputs.image_tag }}" ]; then
            TAG="${{ github.event.inputs.image_tag }}"
          else
            TAG="prod-$(date +%Y%m%d%H%M%S)"
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "Full image: ${{ env.ECR_URI }}:$TAG"

      - name: Build & Push (multi-arch)
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -t "${{ env.ECR_URI }}:${{ steps.tag.outputs.tag }}" \
            --push \
            .

      # ---------- Prepare Task Definition JSON ----------
      - name: Get current task def
        id: td
        run: |
          aws ecs describe-task-definition \
            --task-definition "${{ env.TASK_FAMILY }}" \
            --query 'taskDefinition' > td.json
          # Strip AWS-managed fields for re-register
          jq 'del(.taskDefinitionArn,.revision,.status,.requiresAttributes,.compatibilities,.registeredAt,.registeredBy)' td.json > td.base.json

      - name: Inject new image + health check
        run: |
          NEW_IMAGE="${{ env.ECR_URI }}:${{ steps.tag.outputs.tag }}"
          # Update image for the FIRST container named "riches-reach-ai"
          jq --arg img "$NEW_IMAGE" '
            .containerDefinitions = (
              .containerDefinitions
              | map(if .name=="riches-reach-ai"
                    then
                      .image = $img
                      |
                      ( .healthCheck // {
                          "command": ["CMD-SHELL","curl -fsS http://localhost:8000/health/ || exit 1"],
                          "interval": 30,
                          "timeout": 5,
                          "retries": 3,
                          "startPeriod": 15
                        })
                    else .
                    end)
            )
          ' td.base.json > td.next.json
          cat td.next.json

      - name: Register new task definition
        id: register
        run: |
          ARN=$(aws ecs register-task-definition \
            --cli-input-json file://td.next.json \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "arn=$ARN" >> "$GITHUB_OUTPUT"
          echo "Registered: $ARN"

      - name: Deploy to ECS service
        run: |
          aws ecs update-service \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --service "${{ env.ECS_SERVICE }}" \
            --task-definition "${{ steps.register.outputs.arn }}"
          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --services "${{ env.ECS_SERVICE }}"
          aws ecs describe-services \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --services "${{ env.ECS_SERVICE }}" \
            --query 'services[0].{desired:desiredCount,running:runningCount,pending:pendingCount,td:taskDefinition}'

      # Optional: print last 50 log lines for quick sanity
      - name: Tail recent app logs
        continue-on-error: true
        run: |
          TASK_ARN=$(aws ecs list-tasks \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --service-name "${{ env.ECS_SERVICE }}" \
            --query 'taskArns[0]' --output text)
          [ "$TASK_ARN" = "None" ] && exit 0
          STREAM="ecs/riches-reach-ai/${TASK_ARN##*/}"
          aws logs get-log-events \
            --log-group-name "/ecs/riches-reach-ai" \
            --log-stream-name "$STREAM" \
            --query 'events[-50:].message' --output text || true

  # Simple manual rollback job (uses the stable TD:100)
  rollback:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Roll back to :100
        run: |
          aws ecs update-service \
            --cluster riches-reach-ai-production-cluster \
            --service riches-reach-ai-ai \
            --task-definition "${{ env.ROLLBACK_TD }}" \
            --force-new-deployment
          aws ecs wait services-stable \
            --cluster riches-reach-ai-production-cluster \
            --services riches-reach-ai-ai
