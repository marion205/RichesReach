name: Build and Deploy to ECS

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Optional image tag (default prod-YYYYMMDDHHMMSS)"
        required: false
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  AWS_DEFAULT_REGION: us-east-1
  AWS_ACCOUNT_ID: "498606688292"
  ECR_REPO: riches-reach-ai
  CLUSTER: riches-reach-ai-production-cluster
  SERVICE: riches-reach-ai-ai
  FAMILY: riches-reach-ai-task
  SUBNET_ID: subnet-037cb59936a709c87
  SECURITY_GROUP_ID: sg-007dff041138724c3
  CONTAINER_NAME: riches-reach-ai
  # Command to run migrations inside container
  MIGRATE_CMD: "python manage.py migrate --noinput"
  LOG_GROUP: /ecs/riches-reach-ai

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Choose tag
        id: tag
        run: |
          if [ -z "${{ github.event.inputs.image_tag }}" ]; then
            # Use commit SHA for perfect traceability
            echo "val=${{ github.sha }}" >> $GITHUB_OUTPUT
            # Also create human-friendly tag
            echo "human_tag=prod-$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
          else
            echo "val=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
            echo "human_tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          fi
      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::498606688292:role/GitHubActionsDeployRole
          role-session-name: gha-ecs-deploy

      - name: Assert OIDC creds active & no static keys leaking
        shell: bash
        run: |
          set -euo pipefail
          # block if any static creds are present
          if [ -n "${AWS_ACCESS_KEY_ID:-}" ] && [[ -z "${AWS_SESSION_TOKEN:-}" ]]; then
            echo "❌ Static AWS_ACCESS_KEY_ID detected without session token. Remove repo/org secrets or env vars."
            exit 1
          fi

          # show where the CLI is sourcing creds/region (safe output)
          aws --version
          echo "AWS_REGION=${AWS_REGION:-}"
          echo "AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-}"
          echo "Caller identity:"
          aws sts get-caller-identity

      - name: Ensure both region envs are set
        run: |
          echo "AWS_REGION is $AWS_REGION"
          echo "AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-$AWS_REGION}" >> $GITHUB_ENV

      - name: Log in to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push image (linux/amd64 only for speed)
        run: |
          # Build with both immutable (commit SHA) and human-friendly tags
          IMAGE_IMMUTABLE="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${{ steps.tag.outputs.val }}"
          IMAGE_HUMAN="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${{ steps.tag.outputs.human_tag }}"
          
          echo "Building immutable tag: $IMAGE_IMMUTABLE"
          echo "Building human tag: $IMAGE_HUMAN"
          
          docker build -t "$IMAGE_IMMUTABLE" -t "$IMAGE_HUMAN" .
          docker push "$IMAGE_IMMUTABLE"
          docker push "$IMAGE_HUMAN"
          
          echo "Pushed both tags successfully"
        # If you want multi-arch, swap above with buildx setup and --platform

      - name: Create new TD from baseline (preserve secrets/healthcheck)
        id: td
        shell: bash
        env:
          CLUSTER: riches-reach-ai-production-cluster
          SERVICE: riches-reach-ai-ai
          FAMILY: riches-reach-ai-task
          BASELINE_TD: riches-reach-streaming-pipeline-optimized:1   # <-- optimized task definition with 50% resource reduction
          ECR_URI: 498606688292.dkr.ecr.us-east-1.amazonaws.com/riches-reach-ai
          IMAGE_TAG: ${{ steps.tag.outputs.val }}
          AWS_REGION: us-east-1
        run: |
          set -euo pipefail

          # Get the full baseline task definition JSON
          aws ecs describe-task-definition \
            --task-definition "$BASELINE_TD" \
            --region "$AWS_REGION" \
            --query 'taskDefinition' > td.json

          # Strip server-side fields
          jq 'del(.taskDefinitionArn, .revision, .status, .registeredAt, .registeredBy, .requiresAttributes, .compatibilities)' td.json > td-stripped.json

          # Replace container image ONLY for the primary container (named riches-reach-ai)
          jq --arg img "$ECR_URI:$IMAGE_TAG" '
            .containerDefinitions |=
              (map(if .name == "riches-reach-ai" then .image = $img else . end))
          ' td-stripped.json > td-new.json

          echo "Registering new task definition from baseline $BASELINE_TD ..."
          NEW_TD_ARN=$(aws ecs register-task-definition --region "$AWS_REGION" \
            --cli-input-json file://td-new.json \
            --query 'taskDefinition.taskDefinitionArn' --output text)

          echo "NEW_TD_ARN=$NEW_TD_ARN" | tee -a "$GITHUB_OUTPUT"

      - name: Deploy service to new task definition
        if: steps.td.outputs.NEW_TD_ARN != ''
        env:
          CLUSTER: riches-reach-ai-production-cluster
          SERVICE: riches-reach-ai-ai
          AWS_REGION: us-east-1
        run: |
          set -euo pipefail
          aws ecs update-service \
            --cluster "$CLUSTER" \
            --service "$SERVICE" \
            --task-definition "${{ steps.td.outputs.NEW_TD_ARN }}" \
            --force-new-deployment \
            --region "$AWS_REGION"

          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster "$CLUSTER" \
            --services "$SERVICE" \
            --region "$AWS_REGION"

          echo "✔ Deployment stabilized."

      - name: Enable circuit breaker (auto-rollback on failure)
        run: |
          aws ecs update-service \
            --cluster "$CLUSTER" \
            --service "$SERVICE" \
            --deployment-configuration '{
              "deploymentCircuitBreaker": {"enable": true, "rollback": true},
              "maximumPercent": 200,
              "minimumHealthyPercent": 100
            }' \
            --region "$AWS_REGION"
          echo "✔ Circuit breaker enabled (auto-rollback on failure)"

      - name: Run DB migrations (one-off task on new image)
        id: migrate
        run: |
          TD="${{ steps.td.outputs.NEW_TD_ARN }}"
          # Run a single Fargate task with command override
          TASK_ARN=$(aws ecs run-task \
            --cluster "${CLUSTER}" \
            --launch-type FARGATE \
            --task-definition "$TD" \
            --network-configuration "awsvpcConfiguration={subnets=[${SUBNET_ID}],securityGroups=[${SECURITY_GROUP_ID}],assignPublicIp=ENABLED}" \
            --overrides "$(jq -nc --arg c "$CONTAINER_NAME" --arg cmd "${MIGRATE_CMD}" \
              '{containerOverrides:[{name:$c,command:($cmd|split(" "))}]}')" \
            --query 'tasks[0].taskArn' --output text)
          echo "task_arn=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "Started migrate task: $TASK_ARN"

          # Wait for it to stop and check exit code
          aws ecs wait tasks-stopped --cluster "${CLUSTER}" --tasks "$TASK_ARN"
          EXIT_CODE=$(aws ecs describe-tasks --cluster "${CLUSTER}" --tasks "$TASK_ARN" \
            --query 'tasks[0].containers[0].exitCode' --output text)
          echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
          test "$EXIT_CODE" = "0"

      - name: Show recent logs (service task)
        if: always()
        run: |
          TASK=$(aws ecs list-tasks --cluster "${CLUSTER}" --service-name "${SERVICE}" \
            --query 'taskArns[0]' --output text)
          if [ "$TASK" != "None" ]; then
            STREAM="ecs/${CONTAINER_NAME}/${TASK##*/}"
            echo "=== Last 100 log lines (${STREAM}) ==="
            aws logs get-log-events \
              --log-group-name "${LOG_GROUP}" \
              --log-stream-name "${STREAM}" \
              --start-from-head --limit 100 \
              --query 'events[].message' --output text || true
          fi

      - name: Update baseline for future deployments
        if: steps.migrate.outputs.exit_code == '0'
        run: |
          # Extract revision number from TD ARN for future baseline
          NEW_REVISION=$(echo "${{ steps.td.outputs.NEW_TD_ARN }}" | sed 's/.*:\([0-9]*\)$/\1/')
          echo "New baseline TD: riches-reach-ai-task:$NEW_REVISION"
          echo "Update your workflow's BASELINE_TD to: riches-reach-ai-task:$NEW_REVISION"
          echo "This ensures future deployments use this successful TD as baseline"

      - name: Output summary
        run: |
          echo "Deployed image: ${{ steps.tag.outputs.val }}"
          echo "Human tag: ${{ steps.tag.outputs.human_tag }}"
          echo "New TD: ${{ steps.td.outputs.NEW_TD_ARN }}"
          echo "Migrate task exit: ${{ steps.migrate.outputs.exit_code }}"
          echo "Circuit breaker: ENABLED (auto-rollback on failure)"