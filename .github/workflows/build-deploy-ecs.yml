name: Build and Deploy to ECS

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Optional image tag (default prod-YYYYMMDDHHMMSS)"
        required: false
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: "498606688292"
  ECR_REPO: riches-reach-ai
  CLUSTER: riches-reach-ai-production-cluster
  SERVICE: riches-reach-ai-ai
  FAMILY: riches-reach-ai-task
  SUBNET_ID: subnet-037cb59936a709c87
  SECURITY_GROUP_ID: sg-007dff041138724c3
  CONTAINER_NAME: riches-reach-ai
  # Command to run migrations inside container
  MIGRATE_CMD: "python manage.py migrate --noinput"
  LOG_GROUP: /ecs/riches-reach-ai

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Choose tag
        id: tag
        run: |
          if [ -z "${{ github.event.inputs.image_tag }}" ]; then
            echo "val=prod-$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
          else
            echo "val=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          fi
      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::498606688292:role/GitHubActionsDeployRole
          role-session-name: gha-ecs-deploy

      - name: Log in to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push image (linux/amd64 only for speed)
        run: |
          IMAGE="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${{ steps.tag.outputs.val }}"
          echo "Building $IMAGE"
          docker build -t "$IMAGE" .
          docker push "$IMAGE"
        # If you want multi-arch, swap above with buildx setup and --platform

      - name: Get current task def
        id: curtd
        run: |
          aws ecs describe-task-definition --task-definition "${FAMILY}" \
            --query 'taskDefinition' > td.json
          jq 'del(.status,.revision,.taskDefinitionArn,.requiresAttributes,.compatibilities,.registeredAt,.registeredBy)' td.json > td.edit.json
          # swap image on the target container
          NEW_IMAGE="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${{ steps.tag.outputs.val }}"
          jq --arg c "${CONTAINER_NAME}" --arg i "$NEW_IMAGE" '
            .containerDefinitions |=
              map(if .name==$c then .image=$i else . end)
          ' td.edit.json > td.new.json
          echo "new_image=$NEW_IMAGE" >> $GITHUB_OUTPUT

      - name: Register new task def
        id: reg
        run: |
          arn=$(aws ecs register-task-definition \
            --cli-input-json file://td.new.json \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "td_arn=$arn" >> $GITHUB_OUTPUT
          echo "Registered $arn"

      - name: Update service
        run: |
          aws ecs update-service \
            --cluster "${CLUSTER}" \
            --service "${SERVICE}" \
            --task-definition "${{ steps.reg.outputs.td_arn }}"

      - name: Wait for service stable
        run: |
          aws ecs wait services-stable \
            --cluster "${CLUSTER}" \
            --services "${SERVICE}"
          aws ecs describe-services \
            --cluster "${CLUSTER}" \
            --services "${SERVICE}" \
            --query 'services[0].{desired:desiredCount,running:runningCount,pending:pendingCount,td:taskDefinition}'

      - name: Run DB migrations (one-off task on new image)
        id: migrate
        run: |
          TD="${{ steps.reg.outputs.td_arn }}"
          # Run a single Fargate task with command override
          TASK_ARN=$(aws ecs run-task \
            --cluster "${CLUSTER}" \
            --launch-type FARGATE \
            --task-definition "$TD" \
            --network-configuration "awsvpcConfiguration={subnets=[${SUBNET_ID}],securityGroups=[${SECURITY_GROUP_ID}],assignPublicIp=ENABLED}" \
            --overrides "$(jq -nc --arg c "$CONTAINER_NAME" --arg cmd "${MIGRATE_CMD}" \
              '{containerOverrides:[{name:$c,command:($cmd|split(" "))}]}')" \
            --query 'tasks[0].taskArn' --output text)
          echo "task_arn=$TASK_ARN" >> $GITHUB_OUTPUT
          echo "Started migrate task: $TASK_ARN"

          # Wait for it to stop and check exit code
          aws ecs wait tasks-stopped --cluster "${CLUSTER}" --tasks "$TASK_ARN"
          EXIT_CODE=$(aws ecs describe-tasks --cluster "${CLUSTER}" --tasks "$TASK_ARN" \
            --query 'tasks[0].containers[0].exitCode' --output text)
          echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
          test "$EXIT_CODE" = "0"

      - name: Show recent logs (service task)
        if: always()
        run: |
          TASK=$(aws ecs list-tasks --cluster "${CLUSTER}" --service-name "${SERVICE}" \
            --query 'taskArns[0]' --output text)
          if [ "$TASK" != "None" ]; then
            STREAM="ecs/${CONTAINER_NAME}/${TASK##*/}"
            echo "=== Last 100 log lines (${STREAM}) ==="
            aws logs get-log-events \
              --log-group-name "${LOG_GROUP}" \
              --log-stream-name "${STREAM}" \
              --start-from-head --limit 100 \
              --query 'events[].message' --output text || true
          fi

      - name: Output summary
        run: |
          echo "Deployed image: ${{ steps.curtd.outputs.new_image }}"
          echo "New TD: ${{ steps.reg.outputs.td_arn }}"
          echo "Migrate task exit: ${{ steps.migrate.outputs.exit_code }}"