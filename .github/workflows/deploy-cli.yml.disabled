name: Deploy via CLI
on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 498606688292.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: riches-reach-streaming
  ECS_CLUSTER: riches-reach-cluster
  ECS_SERVICE: riches-reach-streaming-service
  CONTAINER_NAME: streaming-pipeline
  TASK_DEF_PATH: backend/backend/ecs-task-def.json

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }

    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure image tag exists
        run: |
          aws ecr describe-images \
            --repository-name "${{ env.ECR_REPOSITORY }}" \
            --image-ids imageTag="${GITHUB_SHA}" >/dev/null

      - name: Render task-def with image
        run: |
          IMG="${ECR_REGISTRY}/${ECR_REPOSITORY}:${GITHUB_SHA}"
          jq --arg name "${CONTAINER_NAME}" --arg img "$IMG" \
            '.containerDefinitions |= (map(if .name==$name then .image=$img else . end))' \
            "${TASK_DEF_PATH}" > /tmp/td.json

          echo "Rendered containers:"
          jq -r '.containerDefinitions[] | "\(.name) -> \(.image)"' /tmp/td.json
          jq -e --arg name "${CONTAINER_NAME}" '.containerDefinitions[] | select(.name==$name)' /tmp/td.json >/dev/null

      - name: Register task-def
        id: reg
        run: |
          TD_ARN=$(aws ecs register-task-definition \
            --cli-input-json file:///tmp/td.json \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "td_arn=$TD_ARN" >> $GITHUB_OUTPUT
          echo "âœ… Registered $TD_ARN"

      - name: Update service
        run: |
          aws ecs update-service \
            --cluster "${ECS_CLUSTER}" \
            --service "${ECS_SERVICE}" \
            --task-definition "${{ steps.reg.outputs.td_arn }}" \
            --force-new-deployment

      - name: Wait & show events
        run: |
          for i in {1..30}; do
            aws ecs describe-services \
              --cluster "${ECS_CLUSTER}" \
              --services "${ECS_SERVICE}" \
              --query 'services[0].events[0:6].[createdAt,message]' \
              --output table
            sleep 10
          done
