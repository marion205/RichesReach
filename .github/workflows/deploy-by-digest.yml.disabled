name: Deploy by Digest

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'ECR image tag (commit SHA)'
        required: true
        default: ''
      image_digest:
        description: 'ECR image digest (optional, will be fetched if not provided)'
        required: false
        default: ''

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 498606688292.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: riches-reach-streaming
  CLUSTER: riches-reach-cluster
  SERVICE: riches-reach-streaming-service

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set image tag
        id: image
        run: |
          TAG="${{ github.event.inputs.image_tag }}"
          if [ -z "$TAG" ]; then TAG="${{ github.sha }}"; fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Using image tag: $TAG"

      - name: Get image digest
        id: digest
        run: |
          DIGEST="${{ github.event.inputs.image_digest }}"
          if [ -z "$DIGEST" ]; then
            DIGEST=$(aws ecr describe-images --region ${{ env.AWS_REGION }} --repository-name ${{ env.ECR_REPOSITORY }} \
              --image-ids imageTag="${{ steps.image.outputs.tag }}" --query 'imageDetails[0].imageDigest' --output text)
          fi
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
          echo "Using image digest: $DIGEST"

      - name: Get task definition family
        id: td-family
        run: |
          FAMILY=$(aws ecs describe-services --region ${{ env.AWS_REGION }} --cluster ${{ env.CLUSTER }} --services ${{ env.SERVICE }} \
            --query 'services[0].taskDefinition' --output text | awk -F'/' '{print $2}' | awk -F: '{print $1}')
          echo "family=$FAMILY" >> $GITHUB_OUTPUT
          echo "Task definition family: $FAMILY"

      - name: Render task definition
        run: |
          aws ecs describe-task-definition --region ${{ env.AWS_REGION }} --task-definition "${{ steps.td-family.outputs.family }}" \
            --query 'taskDefinition' > /tmp/td.json
          
          # jq patch: set image by digest + env vars
          jq --arg IMG "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}@${{ steps.digest.outputs.digest }}" \
             --arg k1 "DJANGO_SETTINGS_MODULE" --arg v1 "richesreach.settings_production" \
             --arg k2 "GRAPHQL_MODE"           --arg v2 "full" \
          '
            .containerDefinitions |=
              (map(
                 .image = $IMG
                 | .environment |= (
                     map(select(.name != $k1 and .name != $k2))
                     + [{name:$k1,value:$v1},{name:$k2,value:$v2}]
                   )
               ))
            | del(.taskDefinitionArn,.revision,.status,.requiresAttributes,.registeredAt,.registeredBy,.compatibilities)
          ' /tmp/td.json > /tmp/td_patched.json
          
          echo "Rendered task definition:"
          cat /tmp/td_patched.json | jq '.containerDefinitions[0] | {name, image, environment}'

      - name: Register task definition
        id: register
        run: |
          NEW_TD=$(aws ecs register-task-definition --region ${{ env.AWS_REGION }} --cli-input-json file:///tmp/td_patched.json \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "td_arn=$NEW_TD" >> $GITHUB_OUTPUT
          echo "Registered: $NEW_TD"

      - name: Deploy service
        run: |
          aws ecs update-service --region ${{ env.AWS_REGION }} --cluster ${{ env.CLUSTER }} --service ${{ env.SERVICE }} \
            --task-definition "${{ steps.register.outputs.td_arn }}" --force-new-deployment \
            --deployment-configuration "maximumPercent=200,minimumHealthyPercent=0"

      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to complete..."
          for i in {1..30}; do
            STATUS=$(aws ecs describe-services --region ${{ env.AWS_REGION }} --cluster ${{ env.CLUSTER }} --services ${{ env.SERVICE }} \
              --query 'services[0].deployments[?status==`PRIMARY`].rolloutState' --output text)
            echo "Deployment status: $STATUS"
            if [ "$STATUS" = "COMPLETED" ]; then
              echo "Deployment completed successfully!"
              break
            fi
            sleep 30
          done

      - name: Verify running tasks
        run: |
          echo "Current running tasks:"
          aws ecs list-tasks --region ${{ env.AWS_REGION }} --cluster ${{ env.CLUSTER }} --service-name ${{ env.SERVICE }} --desired-status RUNNING \
            | xargs -n1 -I{} aws ecs describe-tasks --region ${{ env.AWS_REGION }} --cluster ${{ env.CLUSTER }} --tasks {} \
              --query 'tasks[].{task:taskArn,td:taskDefinitionArn,lastStatus:lastStatus,ip:attachments[0].details[?name==`privateIPv4Address`]|[0].value}'

      - name: Test endpoints
        run: |
          ALB_HOST="riches-reach-alb-1199497064.us-east-1.elb.amazonaws.com"
          
          echo "Testing health endpoint..."
          curl -s "http://$ALB_HOST/health" | jq . || echo "Health endpoint test failed"
          
          echo "Testing GraphQL endpoint..."
          curl -s "http://$ALB_HOST/graphql" -H 'Content-Type: application/json' \
            -d '{"query":"{ stocks(limit:3){ symbol name price } }"}' | jq . || echo "GraphQL endpoint test failed"
