name: Build, Verify & Push Image (bulletproof)
on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: us-east-1
      ECR_REPO: 498606688292.dkr.ecr.us-east-1.amazonaws.com/riches-reach-streaming
      CONTEXT_DIR: .
      DOCKERFILE: Dockerfile
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute celery.py SHA
        id: cel
        run: |
          set -e
          CEL_SHA=$(sha256sum $CONTEXT_DIR/richesreach/celery.py | awk '{print $1}')
          echo "sha=$CEL_SHA" >> $GITHUB_OUTPUT
          echo "CELERY_SHA=$CEL_SHA"
          echo "‚úÖ Celery.py SHA: $CEL_SHA"

      - name: Verify no DEBUG access
        run: |
          set -e
          if grep -nE 'if[[:space:]]+settings\.DEBUG' $CONTEXT_DIR/richesreach/celery.py; then
            echo "‚ùå Found problematic settings.DEBUG access in celery.py"
            exit 1
          fi
          echo "‚úÖ No settings.DEBUG access found in celery.py"

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_GH_ACTIONS_ROLE_ARN }}
          role-session-name: gha-build
          audience: sts.amazonaws.com

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: ./backend/backend
          file: ./backend/backend/Dockerfile.production
          push: true
          tags: ${{ env.ECR_REPO }}:${{ github.sha }}
          platforms: linux/amd64  # Force AMD64 for Fargate
          no-cache: true
          build-args: |
            GIT_SHA=${{ github.sha }}
            CELERY_SHA=${{ steps.cel.outputs.sha }}

      - name: Output image ref
        run: |
          GIT_SHA=$(git rev-parse --short=12 HEAD)
          DIGEST=$(aws ecr describe-images --repository-name riches-reach-streaming \
            --image-ids imageTag="$GIT_SHA" \
            --query 'imageDetails[0].imageDigest' --output text)
          echo "üéØ Final image reference: ${{ env.ECR_REPO }}:$GIT_SHA@${DIGEST}"
          echo "üìã Use this exact digest for deployment: $DIGEST"
