name: Build & Deploy Backend

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 498606688292.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: riches-reach-streaming
  CONTAINER_NAME: streaming-pipeline
  ECS_CLUSTER: riches-reach-prod
  ECS_SERVICE: riches-reach-prod-svc
  TASK_DEF_PATH: ecs_task_definition_optimized.json

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: backend/backend
          file: backend/backend/Dockerfile.production
          push: true
          provenance: false
          # tag both by commit and latest
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          build-args: |
            BUILD_MARKER=${{ github.run_id }}-${{ github.sha }}

      # Sanity: prove the tag exists in ECR
      - name: Verify image is in ECR
        run: |
          aws ecr describe-images \
            --repository-name "${ECR_REPOSITORY}" \
            --image-ids imageTag="${GITHUB_SHA}" >/dev/null
          echo "✅ Found image tag ${GITHUB_SHA} in ${ECR_REPOSITORY}"

      # Render task def with the **correct** container name
      - name: Render task definition (update image)
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.TASK_DEF_PATH }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      # Sanity: prove the container name exists in the rendered file
      - name: Assert container name exists in rendered task def
        run: |
          cat "${{ steps.render.outputs.task-definition }}" | jq -r '.containerDefinitions[].name' | tee /tmp/containers.txt
          grep -x "${CONTAINER_NAME}" /tmp/containers.txt
          echo "✅ Rendered task def contains container '${CONTAINER_NAME}'"

      # Deploy
      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          # (no container-name here; we're supplying a fully-rendered task def)

      # Optional: force a new deployment so service picks the new revision immediately
      - name: Force new deployment
        run: |
          aws ecs update-service \
            --cluster "${ECS_CLUSTER}" \
            --service "${ECS_SERVICE}" \
            --force-new-deployment >/dev/null
          echo "🔁 Forced new deployment"