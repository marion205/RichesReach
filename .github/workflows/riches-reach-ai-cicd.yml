name: RichesReach CI/CD (OIDC)

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  id-token: write      # REQUIRED for OIDC
  contents: read

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: riches-reach-ai
  DOCKERFILE: backend/backend/Dockerfile.production
  BUILD_CONTEXT: backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.tags.outputs.sha_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::498606688292:role/riches-reach-github-actions
          aws-region: ${{ env.AWS_REGION }}

      - name: Who am I? (smoke)
        run: aws sts get-caller-identity

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repo exists (idempotent)
        run: |
          aws ecr describe-repositories --repository-names "${{ env.ECR_REPOSITORY }}" >/dev/null 2>&1 \
            || aws ecr create-repository --repository-name "${{ env.ECR_REPOSITORY }}"

      - name: Compute image tags
        id: tags
        run: |
          REG="498606688292.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
          REPO="${{ env.ECR_REPOSITORY }}"
          echo "repo_uri=$REG/$REPO" >> $GITHUB_OUTPUT
          echo "sha_tag=$REG/$REPO:${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "branch_tag=$REG/$REPO:$(echo ${GITHUB_REF_NAME} | tr '/_' '--')" >> $GITHUB_OUTPUT
          echo "latest_tag=$REG/$REPO:latest" >> $GITHUB_OUTPUT

      - name: Debug tags
        run: |
          echo "SHA TAG:     ${{ steps.tags.outputs.sha_tag }}"
          echo "BRANCH TAG:  ${{ steps.tags.outputs.branch_tag }}"
          echo "LATEST TAG:  ${{ steps.tags.outputs.latest_tag }}"

      - name: Build image
        run: |
          docker build -f "${{ env.DOCKERFILE }}" \
            -t "${{ steps.tags.outputs.sha_tag }}" \
            -t "${{ steps.tags.outputs.branch_tag }}" \
            -t "${{ steps.tags.outputs.latest_tag }}" \
            "${{ env.BUILD_CONTEXT }}"

      - name: Push image
        run: |
          docker push "${{ steps.tags.outputs.sha_tag }}"
          docker push "${{ steps.tags.outputs.branch_tag }}"
          docker push "${{ steps.tags.outputs.latest_tag }}"

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      CLUSTER: riches-reach-staging
      SERVICE: riches-reach-staging-svc
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::498606688292:role/riches-reach-github-actions
          aws-region: ${{ env.AWS_REGION }}

      - name: Render task definition
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: simple-task-definition.json
          container-name: riches-reach-ai
          image: ${{ needs.build-and-push.outputs.image }}

      - name: Who am I? (smoke)
        run: aws sts get-caller-identity

      - name: Deploy to ECS (staging)
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render.outputs.task-definition }}
          service: ${{ env.SERVICE }}
          cluster: ${{ env.CLUSTER }}
          wait-for-service-stability: true

  deploy-production:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      CLUSTER: riches-reach-prod
      SERVICE: riches-reach-prod-svc
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::498606688292:role/riches-reach-github-actions
          aws-region: ${{ env.AWS_REGION }}
      - name: Render task definition
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: production-task-definition.json
          container-name: riches-reach-ai
          image: ${{ needs.build-and-push.outputs.image }}
      - name: Deploy to ECS (prod)
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render.outputs.task-definition }}
          service: ${{ env.SERVICE }}
          cluster: ${{ env.CLUSTER }}
          wait-for-service-stability: true