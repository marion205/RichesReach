name: RichesReach CI/CD

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - "README.md"
      - "**/*.md"
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: richesreach-cicd-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: us-east-1
  # ECR
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
  ECR_REPOSITORY: riches-reach-ai
  # ECS / Services
  CONTAINER_NAME: riches-reach-web
  STAGING_CLUSTER: riches-reach-staging
  STAGING_SERVICE: riches-reach-staging-svc
  PRODUCTION_CLUSTER: riches-reach-prod
  PRODUCTION_SERVICE: riches-reach-prod-svc
  # Runtimes
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"

permissions:
  contents: read

jobs:
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Validate backend build dependencies (non-blocking)
        run: |
          set -e
          if [ -f backend/backend/requirements-production.txt ]; then
            python -m pip install --upgrade pip
            pip install -r backend/backend/requirements-production.txt || echo "Dependency install failed (OK for CI-only build)."
          else
            echo "requirements-production.txt not found; continuing."
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Compute image tags
        id: vars
        run: |
          IMAGE_URI="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}"
          echo "image_uri=${IMAGE_URI}" >> "$GITHUB_OUTPUT"
          echo "sha_tag=${IMAGE_URI}:${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
          echo "branch_tag=${IMAGE_URI}:$(echo ${GITHUB_REF##*/} | tr '/' '-' )" >> "$GITHUB_OUTPUT"
          echo "latest_tag=${IMAGE_URI}:latest" >> "$GITHUB_OUTPUT"

      - name: Build Docker image
        run: |
          DOCKERFILE="backend/backend/Dockerfile.production"
          [ -f "$DOCKERFILE" ] || { echo "Missing $DOCKERFILE"; exit 1; }
          docker build \
            -f "$DOCKERFILE" \
            -t "${{ steps.vars.outputs.sha_tag }}" \
            -t "${{ steps.vars.outputs.branch_tag }}" \
            -t "${{ steps.vars.outputs.latest_tag }}" \
            backend

      - name: Push Docker image
        run: |
          docker push "${{ steps.vars.outputs.sha_tag }}"
          docker push "${{ steps.vars.outputs.branch_tag }}"
          docker push "${{ steps.vars.outputs.latest_tag }}"

      - name: Export image for downstream jobs
        run: |
          echo "IMAGE=${{ steps.vars.outputs.sha_tag }}" >> $GITHUB_ENV

  deploy-staging:
    name: Deploy to Staging (ECS)
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Render task definition
        id: render-stg
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: simple-task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ needs.build-and-push.outputs.IMAGE || env.IMAGE || format('{0}/{1}:{2}', env.ECR_REGISTRY, env.ECR_REPOSITORY, github.sha) }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-stg.outputs.task-definition }}
          service: ${{ env.STAGING_SERVICE }}
          cluster: ${{ env.STAGING_CLUSTER }}
          wait-for-service-stability: true

  deploy-production:
    name: Deploy to Production (ECS)
    if: github.ref == 'refs/heads/main'
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Render task definition
        id: render-prod
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: production-task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ format('{0}/{1}:{2}', env.ECR_REGISTRY, env.ECR_REPOSITORY, github.sha) }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-prod.outputs.task-definition }}
          service: ${{ env.PRODUCTION_SERVICE }}
          cluster: ${{ env.PRODUCTION_CLUSTER }}
          wait-for-service-stability: true