#!/usr/bin/env python3
"""
Production Environment Setup Script for RichesReach
This script helps configure production environment variables securely
"""

import os
import sys
import secrets
import string
from pathlib import Path
from getpass import getpass
import subprocess

class ProductionEnvSetup:
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.backend_dir = self.project_root / "backend"
        self.mobile_dir = self.project_root / "mobile"
        
    def generate_secret_key(self):
        """Generate a secure Django secret key"""
        alphabet = string.ascii_letters + string.digits + "!@#$%^&*(-_=+)"
        return ''.join(secrets.choice(alphabet) for _ in range(50))
    
    def get_user_input(self, prompt, default=None, secret=False):
        """Get user input with optional default and secret mode"""
        if default:
            prompt += f" [{default}]: "
        else:
            prompt += ": "
            
        if secret:
            return getpass(prompt)
        else:
            return input(prompt) or default
    
    def setup_backend_env(self):
        """Setup backend production environment"""
        print("\n🔧 Setting up Backend Production Environment")
        print("=" * 50)
        
        # Generate secure secret key
        secret_key = self.generate_secret_key()
        print(f"✅ Generated secure SECRET_KEY")
        
        # Get user inputs
        domain_name = self.get_user_input("Enter your domain name", "yourdomain.com")
        db_password = self.get_user_input("Enter database password", secret=True)
        email_user = self.get_user_input("Enter email username")
        email_password = self.get_user_input("Enter email password", secret=True)
        alpha_vantage_key = self.get_user_input("Enter Alpha Vantage API key")
        news_api_key = self.get_user_input("Enter News API key")
        openai_key = self.get_user_input("Enter OpenAI API key")
        aws_access_key = self.get_user_input("Enter AWS Access Key ID")
        aws_secret_key = self.get_user_input("Enter AWS Secret Access Key", secret=True)
        s3_bucket = self.get_user_input("Enter S3 bucket name")
        sentry_dsn = self.get_user_input("Enter Sentry DSN (optional)")
        
        # Create .env file
        env_content = f"""# ============================================================================
# RICHESREACH PRODUCTION ENVIRONMENT CONFIGURATION
# ============================================================================
# Generated by setup_production_env.py
# DO NOT commit this file to version control

# ============================================================================
# DJANGO CORE SETTINGS
# ============================================================================
SECRET_KEY={secret_key}
DEBUG=False
ENVIRONMENT=production
DOMAIN_NAME={domain_name}
ALLOWED_HOSTS={domain_name},www.{domain_name},api.{domain_name}

# ============================================================================
# DATABASE CONFIGURATION (AWS RDS PostgreSQL)
# ============================================================================
DB_NAME=richesreach_prod
DB_USER=postgres
DB_PASSWORD={db_password}
DB_HOST=your-rds-endpoint.region.rds.amazonaws.com
DB_PORT=5432

# ============================================================================
# REDIS CONFIGURATION (AWS ElastiCache)
# ============================================================================
REDIS_HOST=your-elasticache-endpoint.cache.amazonaws.com
REDIS_PORT=6379
REDIS_DB=0

# ============================================================================
# EMAIL CONFIGURATION
# ============================================================================
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_HOST_USER={email_user}
EMAIL_HOST_PASSWORD={email_password}
DEFAULT_FROM_EMAIL=noreply@{domain_name}

# ============================================================================
# API KEYS - FINANCIAL DATA
# ============================================================================
ALPHA_VANTAGE_API_KEY={alpha_vantage_key}
NEWS_API_KEY={news_api_key}
OPENAI_API_KEY={openai_key}

# ============================================================================
# AWS CONFIGURATION
# ============================================================================
AWS_ACCESS_KEY_ID={aws_access_key}
AWS_SECRET_ACCESS_KEY={aws_secret_key}
AWS_STORAGE_BUCKET_NAME={s3_bucket}
AWS_S3_REGION_NAME=us-east-1

# ============================================================================
# SECURITY CONFIGURATION
# ============================================================================
SECURE_SSL_REDIRECT=True
SECURE_HSTS_SECONDS=31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS=True
SECURE_HSTS_PRELOAD=True
SESSION_COOKIE_SECURE=True
CSRF_COOKIE_SECURE=True

# ============================================================================
# MONITORING & LOGGING
# ============================================================================
SENTRY_DSN={sentry_dsn or ''}
LOG_LEVEL=INFO

# ============================================================================
# RATE LIMITING CONFIGURATION
# ============================================================================
ALPHA_VANTAGE_RATE_LIMIT=5
NEWS_API_RATE_LIMIT=2
OPENAI_RATE_LIMIT=60

# ============================================================================
# CACHE CONFIGURATION
# ============================================================================
STOCK_DATA_CACHE_DURATION=3600
NEWS_CACHE_DURATION=1800
USER_DATA_CACHE_DURATION=300

# ============================================================================
# CELERY CONFIGURATION
# ============================================================================
CELERY_TASK_ALWAYS_EAGER=False
CELERY_TASK_EAGER_PROPAGATES=True
CELERY_WORKER_CONCURRENCY=4
CELERY_WORKER_PREFETCH_MULTIPLIER=1

# ============================================================================
# FRONTEND CONFIGURATION
# ============================================================================
FRONTEND_URL=https://{domain_name}
CORS_ALLOWED_ORIGINS=https://{domain_name},https://www.{domain_name}

# ============================================================================
# BACKUP CONFIGURATION
# ============================================================================
BACKUP_ENABLED=True
BACKUP_SCHEDULE=0 2 * * *
BACKUP_RETENTION_DAYS=30
"""
        
        # Write .env file
        env_file = self.backend_dir / ".env"
        with open(env_file, 'w') as f:
            f.write(env_content)
        
        print(f"✅ Created {env_file}")
        return True
    
    def setup_mobile_env(self):
        """Setup mobile app production environment"""
        print("\n📱 Setting up Mobile App Production Environment")
        print("=" * 50)
        
        domain_name = self.get_user_input("Enter your domain name", "yourdomain.com")
        alpha_vantage_key = self.get_user_input("Enter Alpha Vantage API key")
        news_api_key = self.get_user_input("Enter News API key")
        sentry_dsn = self.get_user_input("Enter Sentry DSN (optional)")
        
        # Create mobile env file
        env_content = f"""# ============================================================================
# RICHESREACH MOBILE APP PRODUCTION ENVIRONMENT
# ============================================================================
# Generated by setup_production_env.py

# ============================================================================
# API ENDPOINTS
# ============================================================================
EXPO_PUBLIC_API_URL=https://api.{domain_name}
EXPO_PUBLIC_GRAPHQL_URL=https://api.{domain_name}/graphql
EXPO_PUBLIC_RUST_API_URL=https://api.{domain_name}:3001
EXPO_PUBLIC_WS_URL=wss://api.{domain_name}/ws

# ============================================================================
# APP CONFIGURATION
# ============================================================================
EXPO_PUBLIC_ENVIRONMENT=production
EXPO_PUBLIC_APP_VERSION=1.0.0
EXPO_PUBLIC_BUILD_NUMBER=1
EXPO_PUBLIC_APP_NAME=RichesReach

# ============================================================================
# API KEYS
# ============================================================================
EXPO_PUBLIC_ALPHA_VANTAGE_API_KEY={alpha_vantage_key}
EXPO_PUBLIC_NEWS_API_KEY={news_api_key}

# ============================================================================
# FEATURE FLAGS
# ============================================================================
EXPO_PUBLIC_ENABLE_BIOMETRIC_AUTH=true
EXPO_PUBLIC_ENABLE_PUSH_NOTIFICATIONS=true
EXPO_PUBLIC_ENABLE_ANALYTICS=true
EXPO_PUBLIC_ENABLE_CRASH_REPORTING=true

# ============================================================================
# ANALYTICS & MONITORING
# ============================================================================
EXPO_PUBLIC_SENTRY_DSN={sentry_dsn or ''}
EXPO_PUBLIC_ANALYTICS_ID=your-analytics-id-here

# ============================================================================
# CACHE CONFIGURATION
# ============================================================================
EXPO_PUBLIC_CACHE_DURATION=3600
EXPO_PUBLIC_MAX_CACHE_SIZE=100

# ============================================================================
# SECURITY CONFIGURATION
# ============================================================================
EXPO_PUBLIC_ENABLE_SSL_PINNING=true
EXPO_PUBLIC_ENABLE_CERTIFICATE_PINNING=true

# ============================================================================
# PERFORMANCE CONFIGURATION
# ============================================================================
EXPO_PUBLIC_MAX_CONCURRENT_REQUESTS=5
EXPO_PUBLIC_REQUEST_TIMEOUT=30000
EXPO_PUBLIC_RETRY_ATTEMPTS=3
"""
        
        # Write mobile env file
        env_file = self.mobile_dir / "env.production"
        with open(env_file, 'w') as f:
            f.write(env_content)
        
        print(f"✅ Created {env_file}")
        return True
    
    def setup_gitignore(self):
        """Ensure .env files are in .gitignore"""
        print("\n🔒 Setting up .gitignore for environment files")
        print("=" * 50)
        
        gitignore_files = [
            self.backend_dir / ".gitignore",
            self.mobile_dir / ".gitignore",
            self.project_root / ".gitignore"
        ]
        
        env_patterns = [
            ".env",
            ".env.*",
            "env.production",
            "env.local",
            "*.env"
        ]
        
        for gitignore_file in gitignore_files:
            if gitignore_file.exists():
                with open(gitignore_file, 'r') as f:
                    content = f.read()
                
                # Add env patterns if not already present
                for pattern in env_patterns:
                    if pattern not in content:
                        content += f"\n{pattern}\n"
                
                with open(gitignore_file, 'w') as f:
                    f.write(content)
                
                print(f"✅ Updated {gitignore_file}")
    
    def create_env_validation_script(self):
        """Create a script to validate environment variables"""
        print("\n✅ Creating environment validation script")
        print("=" * 50)
        
        validation_script = self.backend_dir / "validate_env.py"
        script_content = '''#!/usr/bin/env python3
"""
Environment Validation Script
Validates that all required environment variables are set
"""

import os
import sys
from dotenv import load_dotenv

def validate_environment():
    """Validate that all required environment variables are set"""
    load_dotenv()
    
    required_vars = [
        'SECRET_KEY',
        'DB_NAME',
        'DB_USER', 
        'DB_PASSWORD',
        'DB_HOST',
        'ALPHA_VANTAGE_API_KEY',
        'NEWS_API_KEY',
        'EMAIL_HOST_USER',
        'EMAIL_HOST_PASSWORD'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print("❌ Missing required environment variables:")
        for var in missing_vars:
            print(f"   - {var}")
        return False
    
    print("✅ All required environment variables are set")
    return True

if __name__ == "__main__":
    if validate_environment():
        sys.exit(0)
    else:
        sys.exit(1)
'''
        
        with open(validation_script, 'w') as f:
            f.write(script_content)
        
        # Make it executable
        os.chmod(validation_script, 0o755)
        print(f"✅ Created {validation_script}")
    
    def run_setup(self):
        """Run the complete setup process"""
        print("🚀 RichesReach Production Environment Setup")
        print("=" * 60)
        print("This script will help you configure production environment variables")
        print("Make sure you have all your API keys and credentials ready.")
        print()
        
        # Confirm setup
        confirm = input("Do you want to proceed with the setup? (y/N): ")
        if confirm.lower() != 'y':
            print("Setup cancelled.")
            return
        
        try:
            # Setup backend environment
            self.setup_backend_env()
            
            # Setup mobile environment
            self.setup_mobile_env()
            
            # Setup gitignore
            self.setup_gitignore()
            
            # Create validation script
            self.create_env_validation_script()
            
            print("\n🎉 Production Environment Setup Complete!")
            print("=" * 50)
            print("Next steps:")
            print("1. Review the generated .env files")
            print("2. Update database and Redis hostnames for your AWS setup")
            print("3. Test the configuration with: python validate_env.py")
            print("4. Deploy your application")
            print()
            print("⚠️  IMPORTANT: Never commit .env files to version control!")
            
        except KeyboardInterrupt:
            print("\n\nSetup cancelled by user.")
        except Exception as e:
            print(f"\n❌ Error during setup: {e}")
            sys.exit(1)

if __name__ == "__main__":
    setup = ProductionEnvSetup()
    setup.run_setup()
