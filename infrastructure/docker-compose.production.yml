version: "3.8"

services:
  # --------------------
  # Django Backend (ASGI via Daphne or WSGI via Gunicorn)
  # --------------------
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: richesreach-backend
    restart: unless-stopped
    environment:
      # Django
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DJANGO_SETTINGS_MODULE=richesreach.settings
      - ALLOWED_HOSTS=*
      # Database
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      # Redis / Celery
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/1
      # Integrations (optional)
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - NEWS_API_KEY=${NEWS_API_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_STORAGE_BUCKET_NAME=${AWS_STORAGE_BUCKET_NAME}
      - AWS_S3_REGION_NAME=${AWS_S3_REGION_NAME}
      - SENTRY_DSN=${SENTRY_DSN}
      # Security
      - SECURE_SSL_REDIRECT=True
      - SECURE_HSTS_SECONDS=31536000
      - SECURE_HSTS_INCLUDE_SUBDOMAINS=True
      - SECURE_HSTS_PRELOAD=True
    ports:
      - "8000:8000"
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - postgres
      - redis
    networks:
      - richesreach-network
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/health/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
  # --------------------
  # PostgreSQL
  # --------------------
  postgres:
    image: postgres:15-alpine
    container_name: richesreach-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - richesreach-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U '${DB_USER}' -d '${DB_NAME}' -h localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
  # --------------------
  # Redis
  # --------------------
  redis:
    image: redis:7-alpine
    container_name: richesreach-redis
    restart: unless-stopped
    command: sh -c "redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}"
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - richesreach-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a '${REDIS_PASSWORD}' ping | grep PONG"]
      interval: 30s
      timeout: 10s
      retries: 5
  # --------------------
  # Celery Worker
  # --------------------
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: richesreach-celery-worker
    restart: unless-stopped
    command: celery -A richesreach worker -l info --concurrency=4
    environment:
      - DJANGO_SETTINGS_MODULE=richesreach.settings
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/1
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - NEWS_API_KEY=${NEWS_API_KEY}
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - postgres
      - redis
    networks:
      - richesreach-network
  # --------------------
  # Celery Beat
  # --------------------
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: richesreach-celery-beat
    restart: unless-stopped
    command: celery -A richesreach beat -l info
    environment:
      - DJANGO_SETTINGS_MODULE=richesreach.settings
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/1
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - postgres
      - redis
    networks:
      - richesreach-network
  # --------------------
  # Nginx Reverse Proxy
  # --------------------
  nginx:
    image: nginx:alpine
    container_name: richesreach-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
    depends_on:
      - backend
    networks:
      - richesreach-network
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost/health/ | grep ok"]
      interval: 30s
      timeout: 10s
      retries: 5
  # --------------------
  # Monitoring - Prometheus
  # --------------------
  prometheus:
    image: prom/prometheus:latest
    container_name: richesreach-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=200h'
    networks:
      - richesreach-network

  # --------------------
  # Monitoring - Grafana
  # --------------------
  grafana:
    image: grafana/grafana:latest
    container_name: richesreach-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - richesreach-network

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  prometheus_data:
  grafana_data:

networks:
  richesreach-network:
    driver: bridge
