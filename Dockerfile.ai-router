# AI Router Dockerfile for Phase 3
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements
COPY backend/requirements.production.txt requirements.txt

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Install additional AI dependencies
RUN pip install --no-cache-dir \
    openai \
    anthropic \
    google-generativeai \
    aiohttp \
    structlog \
    prometheus-client

# Copy AI Router code
COPY backend/backend/core/ai_router.py /app/ai_router.py
COPY backend/backend/core/ai_router_api.py /app/ai_router_api.py

# Create AI Router service
COPY <<EOF /app/ai_router_service.py
#!/usr/bin/env python3
"""
AI Router Service - Phase 3
Standalone service for AI routing and management
"""

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import os
import logging

# Import AI Router components
from ai_router import ai_router
from ai_router_api import router as ai_router_api

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("ai-router")

# Create FastAPI app
app = FastAPI(
    title="RichesReach AI Router",
    description="Phase 3 AI Router Service",
    version="1.0.0"
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Include AI Router API
app.include_router(ai_router_api)

# Health check endpoint
@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "service": "ai-router",
        "models_loaded": len(ai_router.models),
        "performance_tracking": len(ai_router.performance_tracking)
    }

# Root endpoint
@app.get("/")
async def root():
    return {
        "service": "RichesReach AI Router",
        "version": "1.0.0",
        "phase": "3",
        "endpoints": {
            "health": "/health",
            "ai_router": "/ai/",
            "models": "/ai/models",
            "performance": "/ai/performance"
        }
    }

if __name__ == "__main__":
    port = int(os.getenv("PORT", 8001))
    uvicorn.run(
        "ai_router_service:app",
        host="0.0.0.0",
        port=port,
        log_level="info"
    )
EOF

# Make service executable
RUN chmod +x /app/ai_router_service.py

# Expose port
EXPOSE 8001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8001/health || exit 1

# Run the service
CMD ["python", "ai_router_service.py"]
