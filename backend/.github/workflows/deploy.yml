name: Deploy to Production

on:
  push:
    branches: [ main ]
    paths:
      - "backend/**"
      - ".github/workflows/**"

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: riches-reach-ai
  ECS_CLUSTER: riches-reach-ai-production-cluster
  ECS_SERVICE: riches-reach-ai-ai

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Build & push image (uses the correct Dockerfile)
        uses: docker/build-push-action@v5
        with:
          context: .                                   # repo root as context
          file: backend/backend/Dockerfile.production  # point to the real Dockerfile
          push: true
          build-args: |
            GIT_SHA=${{ github.sha }}
          tags: |
            498606688292.dkr.ecr.us-east-1.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ github.sha }}                # immutable
            498606688292.dkr.ecr.us-east-1.amazonaws.com/${{ env.ECR_REPOSITORY }}:prod-${{ github.run_id }}        # human-friendly
          
      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment \
            --wait-for-service-stability
            
      - name: Test deployment
        run: |
          sleep 30
          curl -f http://riches-reach-alb-1199497064.us-east-1.elb.amazonaws.com/health || exit 1
          
      - name: URL smoke test (server-side routing)
        run: |
          python - <<'PY'
          import os, django
          os.environ.setdefault("DJANGO_SETTINGS_MODULE", "richesreach.settings_production")
          django.setup()
          from django.urls import resolve
          for p in [
              "/api/tax/optimization-summary",
              "/api/tax/loss-harvesting",
              "/api/tax/smart-lot-optimizer-v2",
              "/api/tax/two-year-gains-planner",
              "/api/tax/wash-sale-guard-v2",
          ]:
              resolve(p)
              print("OK", p)
          PY
