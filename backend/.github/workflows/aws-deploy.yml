name: AWS Production Deployment
on:
push:
branches: [ main, production ]
pull_request:
branches: [ main ]
workflow_dispatch:
inputs:
environment:
description: 'Deployment Environment'
required: true
default: 'staging'
type: choice
options:
- staging
- production
env:
AWS_REGION: us-east-1
ECR_REPOSITORY: riches-reach-ai-service
ECS_CLUSTER: riches-reach-ai-cluster
ECS_SERVICE: riches-reach-ai-service
jobs:
test:
name: Test and Build
runs-on: ubuntu-latest
steps:
- name: Checkout code
uses: actions/checkout@v3
- name: Set up Python
uses: actions/setup-python@v4
with:
python-version: '3.10'
- name: Install dependencies
run: |
python -m pip install --upgrade pip
pip install -r requirements-production.txt
pip install pytest pytest-asyncio pytest-cov
- name: Run tests
run: |
pytest tests/ --cov=core --cov-report=xml --cov-report=html
- name: Upload coverage to Codecov
uses: codecov/codecov-action@v3
with:
file: ./coverage.xml
flags: unittests
name: codecov-umbrella
security-scan:
name: Security Scan
runs-on: ubuntu-latest
needs: test
steps:
- name: Checkout code
uses: actions/checkout@v3
- name: Run Bandit security scan
run: |
pip install bandit
bandit -r core/ -f json -o bandit-report.json
- name: Upload Bandit results
uses: actions/upload-artifact@v3
with:
name: bandit-results
path: bandit-report.json
build-and-push:
name: Build and Push Docker Image
runs-on: ubuntu-latest
needs: [test, security-scan]
if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
steps:
- name: Checkout code
uses: actions/checkout@v3
- name: Configure AWS credentials
uses: aws-actions/configure-aws-credentials@v2
with:
aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
aws-region: ${{ env.AWS_REGION }}
- name: Login to Amazon ECR
id: login-ecr
uses: aws-actions/amazon-ecr-login@v1
- name: Build, tag, and push image to Amazon ECR
env:
ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
IMAGE_TAG: ${{ github.sha }}
run: |
docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
deploy-staging:
name: Deploy to Staging
runs-on: ubuntu-latest
needs: build-and-push
if: github.ref == 'refs/heads/main'
environment: staging
steps:
- name: Checkout code
uses: actions/checkout@v3
- name: Configure AWS credentials
uses: aws-actions/configure-aws-credentials@v2
with:
aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
aws-region: ${{ env.AWS_REGION }}
- name: Deploy to staging
run: |
aws cloudformation deploy \
--template-file cloudformation-template.yaml \
--stack-name riches-reach-ai-staging \
--parameter-overrides Environment=staging \
--capabilities CAPABILITY_NAMED_IAM \
--region ${{ env.AWS_REGION }}
- name: Update ECS service
run: |
aws ecs update-service \
--cluster ${{ env.ECS_CLUSTER }}-staging \
--service ${{ env.ECS_SERVICE }}-staging \
--force-new-deployment \
--region ${{ env.AWS_REGION }}
- name: Wait for deployment
run: |
aws ecs wait services-stable \
--cluster ${{ env.ECS_CLUSTER }}-staging \
--services ${{ env.ECS_SERVICE }}-staging \
--region ${{ env.AWS_REGION }}
deploy-production:
name: Deploy to Production
runs-on: ubuntu-latest
needs: build-and-push
if: github.ref == 'refs/heads/production'
environment: production
steps:
- name: Checkout code
uses: actions/checkout@v3
- name: Configure AWS credentials
uses: aws-actions/configure-aws-credentials@v2
with:
aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
aws-region: ${{ env.AWS_REGION }}
- name: Deploy to production
run: |
aws cloudformation deploy \
--template-file cloudformation-template.yaml \
--stack-name riches-reach-ai-production \
--parameter-overrides Environment=production \
--capabilities CAPABILITY_NAMED_IAM \
--region ${{ env.AWS_REGION }}
- name: Update ECS service
run: |
aws ecs update-service \
--cluster ${{ env.ECS_CLUSTER }} \
--service ${{ env.ECS_SERVICE }} \
--force-new-deployment \
--region ${{ env.AWS_REGION }}
- name: Wait for deployment
run: |
aws ecs wait services-stable \
--cluster ${{ env.ECS_CLUSTER }} \
--services ${{ env.ECS_SERVICE }} \
--region ${{ env.AWS_REGION }}
- name: Run smoke tests
run: |
# Wait for service to be healthy
sleep 60
# Get load balancer DNS
ALB_DNS=$(aws cloudformation describe-stacks \
--stack-name riches-reach-ai-production \
--region ${{ env.AWS_REGION }} \
--query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' \
--output text)
# Test health endpoint
curl -f "http://$ALB_DNS/health" || exit 1
echo " Production deployment verified"
notify:
name: Notify Deployment Status
runs-on: ubuntu-latest
needs: [deploy-staging, deploy-production]
if: always()
steps:
- name: Notify Slack
uses: 8398a7/action-slack@v3
with:
status: ${{ job.status }}
channel: '#deployments'
text: |
Deployment ${{ job.status }} for RichesReach AI
Environment: ${{ needs.deploy-staging.result || needs.deploy-production.result }}
Commit: ${{ github.sha }}
Branch: ${{ github.ref }}
env:
SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
if: always()
rollback:
name: Rollback on Failure
runs-on: ubuntu-latest
needs: [deploy-staging, deploy-production]
if: failure()
steps:
- name: Checkout code
uses: actions/checkout@v3
- name: Configure AWS credentials
uses: aws-actions/configure-aws-credentials@v2
with:
aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
aws-region: ${{ env.AWS_REGION }}
- name: Rollback ECS service
run: |
if [ "${{ needs.deploy-production.result }}" == "failure" ]; then
# Rollback production to previous version
aws ecs update-service \
--cluster ${{ env.ECS_CLUSTER }} \
--service ${{ env.ECS_SERVICE }} \
--task-definition $(aws ecs describe-services \
--cluster ${{ env.ECS_CLUSTER }} \
--services ${{ env.ECS_SERVICE }} \
--region ${{ env.AWS_REGION }} \
--query 'services[0].deployments[1].taskDefinition' \
--output text) \
--region ${{ env.AWS_REGION }}
fi
- name: Notify rollback
uses: 8398a7/action-slack@v3
with:
status: custom
custom_payload: |
{
"text": " Deployment failed - rolling back to previous version",
"attachments": [{
"color": "danger",
"fields": [
{"title": "Environment", "value": "Production", "short": true},
{"title": "Status", "value": "Rolled Back", "short": true}
]
}]
}
env:
SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
