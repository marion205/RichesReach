"""
Django settings for richesreach project.
Generated by 'django-admin startproject' using Django 4.2.1.
For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
from pathlib import Path
import os
from datetime import timedelta
import environ
# Load environment variables from .env file
env = environ.Env()
environ.Env.read_env()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-wk_qy339*l)1xg=(f6_e@9+d7sgi7%#0t!e17a3nkeu&p#@zq9'
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'
ALLOWED_HOSTS = ["*"]  # dev only
# Frontend URL for email links
FRONTEND_URL = os.getenv('FRONTEND_URL', 'http://localhost:3000')
# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'channels',
    'core',
    'graphene_django',
    'django_celery_results',
]

# Optional safety while transitioning
try:
    import channels  # noqa
    if 'channels' not in INSTALLED_APPS:
        INSTALLED_APPS.append('channels')
except ImportError:
    pass
MIDDLEWARE = [
'corsheaders.middleware.CorsMiddleware',
'django.middleware.security.SecurityMiddleware',
'django.contrib.sessions.middleware.SessionMiddleware',
'django.middleware.common.CommonMiddleware',
'django.middleware.csrf.CsrfViewMiddleware',
'django.contrib.auth.middleware.AuthenticationMiddleware',
'django.contrib.messages.middleware.MessageMiddleware',
'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
ROOT_URLCONF = 'richesreach.urls'
TEMPLATES = [
{
'BACKEND': 'django.template.backends.django.DjangoTemplates',
'DIRS': [],
'APP_DIRS': True,
'OPTIONS': {
'context_processors': [
'django.template.context_processors.debug',
'django.template.context_processors.request',
'django.contrib.auth.context_processors.auth',
'django.contrib.messages.context_processors.messages',
],
},
},
]
WSGI_APPLICATION = 'richesreach.wsgi.application'
ASGI_APPLICATION = 'richesreach.asgi.application'
# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Use PostgreSQL in production, SQLite in development
if all(os.getenv(k) for k in ["POSTGRES_HOST", "POSTGRES_DB", "POSTGRES_USER", "POSTGRES_PASSWORD"]):
    # Production: Use PostgreSQL from environment variables
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'HOST': os.environ['POSTGRES_HOST'],
            'PORT': os.environ.get('POSTGRES_PORT', '5432'),
            'NAME': os.environ['POSTGRES_DB'],
            'USER': os.environ['POSTGRES_USER'],
            'PASSWORD': os.environ['POSTGRES_PASSWORD'],
        }
    }
elif os.getenv('DATABASE_URL'):
    # Fallback: Use DATABASE_URL if present
    import dj_database_url
    DATABASES = {
        'default': dj_database_url.parse(os.environ['DATABASE_URL'], conn_max_age=600)
    }
else:
    # Development: Use SQLite
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Log database engine for debugging
import logging
logging.getLogger(__name__).warning("DB_ENGINE=%s", DATABASES["default"]["ENGINE"])
# Email Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_USE_SSL = False # Disable SSL for local development
EMAIL_SSL_CERTFILE = '' # No SSL certificate file
EMAIL_SSL_KEYFILE = '' # No SSL key file
EMAIL_SSL_CHECK_HOSTNAME = False # Disable hostname verification
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'noreply@richesreach.com')
# Cache Configuration (for rate limiting and tokens)
CACHES = {
'default': {
'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
'LOCATION': 'unique-snowflake',
}
}
# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
{
'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
},
{
'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
},
{
'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
},
{
'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
},
]
# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.environ.get('STATIC_ROOT', os.path.join(BASE_DIR, 'staticfiles'))
# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
CORS_ALLOW_ALL_ORIGINS = True # For dev only

# AAVE/DeFi Configuration
RPC_URL = "https://eth-sepolia.g.alchemy.com/v2/demo"  # Demo RPC for testing
AAVE_POOL_ADDRESS = "0x6Ae43d3271ff6888e7Fc43Fd7321a503ff738951"  # Sepolia AAVE Pool
CHAINLINK_USDC_USD_FEED = "0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419"  # Mainnet feed for demo
GRAPHENE = {
    "SCHEMA": "core.schema.schema",
    "MIDDLEWARE": [
        "graphql_jwt.middleware.JSONWebTokenMiddleware"
    ],
    "SCHEMA_INDEPTH_LIMIT": 20,
    "SCHEMA_OUTPUT": "schema.json",
}
AUTH_USER_MODEL = "core.User"
# Authentication backends
AUTHENTICATION_BACKENDS = [
'graphql_jwt.backends.JSONWebTokenBackend',
'django.contrib.auth.backends.ModelBackend',
]

# JWT Configuration
GRAPHQL_JWT = {
    'JWT_ALGORITHM': 'HS256',
    'JWT_SECRET_KEY': SECRET_KEY,
    'JWT_EXPIRATION_DELTA': timedelta(minutes=60),
    'JWT_REFRESH_EXPIRATION_DELTA': timedelta(days=7),
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_LEEWAY': 0,
    'JWT_AUTH_HEADER_PREFIX': 'JWT',
    'JWT_AUTH_COOKIE': None,
}
# OpenAI Configuration
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY') # Set this in environment variable OPENAI_API_KEY
OPENAI_MODEL = "gpt-3.5-turbo" # Default model to use
OPENAI_MAX_TOKENS = 1000 # Maximum tokens for responses

# ML Service Configuration
ML_SERVICE_CONFIG = {
    'ENABLED': os.getenv('ML_SERVICE_ENABLED', 'True').lower() == 'true',
    'MODEL_PATH': os.getenv('ML_MODEL_PATH', 'backend/ml_models/'),
    'CACHE_TIMEOUT': int(os.getenv('ML_CACHE_TIMEOUT', '3600')),  # 1 hour
    'BATCH_SIZE': int(os.getenv('ML_BATCH_SIZE', '100')),
    'MAX_CONCURRENT_REQUESTS': int(os.getenv('ML_MAX_CONCURRENT', '10')),
    'FALLBACK_TO_RULES': os.getenv('ML_FALLBACK_TO_RULES', 'True').lower() == 'true',
    'LOG_LEVEL': os.getenv('ML_LOG_LEVEL', 'INFO'),
    'ENABLE_OPTIMIZATION': os.getenv('ML_ENABLE_OPTIMIZATION', 'True').lower() == 'true',
    'ENABLE_RISK_METRICS': os.getenv('ML_ENABLE_RISK_METRICS', 'True').lower() == 'true',
    'ENABLE_TRANSACTION_COSTS': os.getenv('ML_ENABLE_TRANSACTION_COSTS', 'True').lower() == 'true',
}

# Point-in-Time Data Configuration
POINT_IN_TIME_CONFIG = {
    'ENABLED': os.getenv('PIT_DATA_ENABLED', 'True').lower() == 'true',
    'SNAPSHOT_FREQUENCY': os.getenv('PIT_SNAPSHOT_FREQUENCY', 'daily'),  # daily, hourly, real-time
    'RETENTION_DAYS': int(os.getenv('PIT_RETENTION_DAYS', '90')),
    'BATCH_SIZE': int(os.getenv('PIT_BATCH_SIZE', '1000')),
    'ENABLE_CORPORATE_ACTIONS': os.getenv('PIT_ENABLE_CORPORATE_ACTIONS', 'True').lower() == 'true',
}

# Institutional Features Configuration
INSTITUTIONAL_CONFIG = {
    'ENABLED': os.getenv('INSTITUTIONAL_FEATURES_ENABLED', 'True').lower() == 'true',
    'REQUIRE_AUTHENTICATION': os.getenv('INSTITUTIONAL_REQUIRE_AUTH', 'True').lower() == 'true',
    'RATE_LIMIT_PER_USER': int(os.getenv('INSTITUTIONAL_RATE_LIMIT', '100')),  # requests per hour
    'ENABLE_AUDIT_TRAIL': os.getenv('INSTITUTIONAL_ENABLE_AUDIT', 'True').lower() == 'true',
    'ENABLE_DRY_RUN': os.getenv('INSTITUTIONAL_ENABLE_DRY_RUN', 'True').lower() == 'true',
    'MAX_UNIVERSE_SIZE': int(os.getenv('INSTITUTIONAL_MAX_UNIVERSE', '2000')),
    'DEFAULT_CONSTRAINTS': {
        'max_weight_per_name': float(os.getenv('INST_MAX_WEIGHT_PER_NAME', '0.10')),
        'max_sector_weight': float(os.getenv('INST_MAX_SECTOR_WEIGHT', '0.30')),
        'max_turnover': float(os.getenv('INST_MAX_TURNOVER', '0.25')),
        'min_liquidity_score': float(os.getenv('INST_MIN_LIQUIDITY', '0.0')),
        'risk_aversion': float(os.getenv('INST_RISK_AVERSION', '5.0')),
        'cost_aversion': float(os.getenv('INST_COST_AVERSION', '1.0')),
        'cvar_confidence': float(os.getenv('INST_CVAR_CONFIDENCE', '0.95')),
        'long_only': os.getenv('INST_LONG_ONLY', 'True').lower() == 'true',
    }
}

# Monitoring Configuration
MONITORING_CONFIG = {
    'ENABLED': os.getenv('MONITORING_ENABLED', 'True').lower() == 'true',
    'LOG_LEVEL': os.getenv('MONITORING_LOG_LEVEL', 'INFO'),
    'ENABLE_METRICS': os.getenv('MONITORING_ENABLE_METRICS', 'True').lower() == 'true',
    'ENABLE_ALERTS': os.getenv('MONITORING_ENABLE_ALERTS', 'True').lower() == 'true',
    'METRICS_RETENTION_DAYS': int(os.getenv('MONITORING_RETENTION_DAYS', '30')),
    'ALERT_EMAIL': os.getenv('MONITORING_ALERT_EMAIL', ''),
    'SLACK_WEBHOOK': os.getenv('MONITORING_SLACK_WEBHOOK', ''),
    'HEALTH_CHECK_INTERVAL': int(os.getenv('MONITORING_HEALTH_CHECK_INTERVAL', '60')),  # seconds
}
# AlphaVantage API Configuration
ALPHA_VANTAGE_API_KEY = os.getenv('ALPHA_VANTAGE_API_KEY')
if not ALPHA_VANTAGE_API_KEY:
    print("WARNING: ALPHA_VANTAGE_API_KEY not set. Stock price data will not be available.")
# Redis Configuration for Caching
REDIS_HOST = os.getenv('REDIS_HOST', 'localhost')
REDIS_PORT = int(os.getenv('REDIS_PORT', 6379))
REDIS_DB = int(os.getenv('REDIS_DB', 0))
REDIS_PASSWORD = os.getenv('REDIS_PASSWORD', None)
# Cache Configuration
CACHES = {
'default': {
'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
'LOCATION': 'unique-snowflake',
'KEY_PREFIX': 'richesreach',
'TIMEOUT': 300, # 5 minutes default
}
}
# Use Redis for session storage as well
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'
# Stock Analysis Configuration
STOCK_ANALYSIS_CONFIG = {
'CACHE_TIMEOUT': {
'QUOTE_DATA': 300, # 5 minutes for real-time quotes
'OVERVIEW_DATA': 3600, # 1 hour for company overview
'HISTORICAL_DATA': 86400, # 24 hours for historical data
'ANALYSIS_RESULT': 1800, # 30 minutes for analysis results
},
'RATE_LIMITS': {
'ALPHA_VANTAGE': {
'REQUESTS_PER_MINUTE': 5,
'REQUESTS_PER_DAY': 500,
'BURST_LIMIT': 10,
}
},
'BATCH_PROCESSING': {
'MAX_STOCKS_PER_BATCH': 10,
'BATCH_DELAY_SECONDS': 2,
'MAX_CONCURRENT_BATCHES': 3,
}
}
# Celery Configuration (Disabled for local development)
CELERY_BROKER_URL = 'memory://'
CELERY_RESULT_BACKEND = 'cache+memory://'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
# Celery Beat Schedule
from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
'update-stock-data': {
'task': 'core.stock_service.update_stock_data_periodic',
'schedule': 3600.0, # Every hour
},
'cleanup-old-cache': {
'task': 'core.stock_service.cleanup_old_cache',
'schedule': 86400.0, # Every day
},
"prewarm-universe-2am": {
    "task": "core.tasks.prewarm_universe",
    "schedule": crontab(hour=2, minute=0),
    "options": {"queue": "ml_io"},
},
"train-stacking-3am": {
    "task": "core.tasks.train_stacking_model",
    "schedule": crontab(hour=3, minute=0),
    "options": {"queue": "ml_train"},
},
}
# Channels Configuration (Disabled for local development)
CHANNEL_LAYERS = {
'default': {
'BACKEND': 'channels.layers.InMemoryChannelLayer',
},
}

# CORS Configuration (dev only)
CORS_ALLOW_ALL_ORIGINS = True  # dev only

# Authentication backends
AUTHENTICATION_BACKENDS = [
    "graphql_jwt.backends.JSONWebTokenBackend",
    "django.contrib.auth.backends.ModelBackend",
]

# GraphQL Configuration
GRAPHENE = {
    "SCHEMA": "core.schema.schema",
    # Disable JWT middleware for development to avoid token decoding errors
    # "MIDDLEWARE": ["graphql_jwt.middleware.JSONWebTokenMiddleware"],
}

# CSRF Configuration for dev
CSRF_TRUSTED_ORIGINS = ["http://localhost:8000", "http://127.0.0.1:8000"]

# Environment-driven RPC + AAVE Pool
RPC_SEPOLIA = os.getenv("RPC_SEPOLIA", "https://eth-sepolia.g.alchemy.com/v2/<KEY>")
AAVE_POOL_ADDRESS = os.getenv("AAVE_POOL_ADDRESS", "0x0000000000000000000000000000000000000000")

# Celery Configuration for Real-Time Data Updates
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'America/New_York'

# Real-Time Data Update Settings
REALTIME_UPDATE_ENABLED = os.getenv('REALTIME_UPDATE_ENABLED', 'True').lower() == 'true'
REALTIME_UPDATE_INTERVAL = int(os.getenv('REALTIME_UPDATE_INTERVAL', '300'))  # 5 minutes
PRIORITY_UPDATE_INTERVAL = int(os.getenv('PRIORITY_UPDATE_INTERVAL', '60'))   # 1 minute

# API Rate Limiting Settings
API_RATE_LIMITS = {
    'ALPHA_VANTAGE': {'limit': 5, 'window': 60},   # 5 requests per minute
    'FINNHUB': {'limit': 60, 'window': 60},        # 60 requests per minute
    'YAHOO_FINANCE': {'limit': 100, 'window': 60}, # 100 requests per minute
}
# Production Channels Configuration
if not DEBUG:
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': {
                "hosts": [('127.0.0.1', 6379)],
            },
        },
    }
