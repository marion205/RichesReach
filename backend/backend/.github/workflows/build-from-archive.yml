name: Build from Archive

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 498606688292.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: riches-reach-streaming

jobs:
  build:
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: aws-actions/amazon-ecr-login@v2

      - name: Verify HEAD has the fix
        run: |
          grep -n "settings\.DEBUG" backend/backend/richesreach/celery.py || echo "OK: no settings.DEBUG"

      - name: Capture celery.py SHA
        id: celery-sha
        run: |
          CELERY_SHA=$(shasum -a 256 backend/backend/richesreach/celery.py | awk '{print $1}')
          echo "celery_sha=$CELERY_SHA" >> $GITHUB_OUTPUT
          echo "CELERY_SHA=$CELERY_SHA"

      - name: Create clean source tarball
        run: |
          git archive -o rr-src.tgz HEAD:backend/backend
          ls -lh rr-src.tgz

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ops/Dockerfile.src-archive
          push: true
          no-cache: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          build-args: |
            CELERY_SHA=${{ steps.celery-sha.outputs.celery_sha }}

      - name: Verify image contains proof
        run: |
          # Pull the image and verify it contains our build proof
          docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          docker run --rm ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} cat /BUILD_PROOF.txt
          
          # Verify the label
          docker inspect ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} --format '{{ index .Config.Labels "rr.celery_sha" }}'

      - name: Get image digest
        id: digest
        run: |
          DIGEST=$(aws ecr describe-images --region ${{ env.AWS_REGION }} --repository-name ${{ env.ECR_REPOSITORY }} \
            --image-ids imageTag="${{ github.sha }}" --query 'imageDetails[0].imageDigest' --output text)
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
          echo "Pushed digest: $DIGEST"

      - name: Output deployment info
        run: |
          echo "Image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"
          echo "Digest: ${{ steps.digest.outputs.digest }}"
          echo "Celery SHA: ${{ steps.celery-sha.outputs.celery_sha }}"
