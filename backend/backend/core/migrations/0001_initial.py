# Generated by Django 4.2.1 on 2025-10-03 01:09

from decimal import Decimal
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('name', models.CharField(default='User', max_length=255)),
                ('profile_pic', models.URLField(blank=True, help_text="URL to user's profile picture", null=True)),
                ('first_name', models.CharField(blank=True, default='', max_length=150)),
                ('last_name', models.CharField(blank=True, default='', max_length=150)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('hasPremiumAccess', models.BooleanField(default=False)),
                ('subscriptionTier', models.CharField(choices=[('BASIC', 'Basic'), ('PREMIUM', 'Premium'), ('ENTERPRISE', 'Enterprise')], default='BASIC', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='core_user_set', related_query_name='core_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='core_user_set', related_query_name='core_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AIPortfolioRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('risk_profile', models.CharField(default='Moderate', max_length=50)),
                ('portfolio_allocation', models.JSONField(default=dict)),
                ('recommended_stocks', models.JSONField(default=list)),
                ('expected_portfolio_return', models.FloatField(default=0.0)),
                ('risk_assessment', models.TextField(default='No assessment available')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='aiRecommendations', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BankAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_id', models.CharField(help_text='Yodlee account ID', max_length=64)),
                ('name', models.CharField(blank=True, help_text='Account display name', max_length=128)),
                ('type', models.CharField(blank=True, choices=[('CHECKING', 'Checking'), ('SAVINGS', 'Savings'), ('CREDIT', 'Credit Card'), ('INVESTMENT', 'Investment'), ('LOAN', 'Loan'), ('MORTGAGE', 'Mortgage'), ('OTHER', 'Other')], max_length=32)),
                ('mask', models.CharField(blank=True, help_text='Last 4 digits or account mask', max_length=8)),
                ('currency', models.CharField(default='USD', help_text='Account currency', max_length=8)),
                ('balance', models.DecimalField(blank=True, decimal_places=2, help_text='Current balance', max_digits=15, null=True)),
                ('available_balance', models.DecimalField(blank=True, decimal_places=2, help_text='Available balance', max_digits=15, null=True)),
                ('provider_id', models.CharField(blank=True, help_text='Yodlee provider ID', max_length=64)),
                ('is_manual', models.BooleanField(default=False, help_text='Is this a manually added account')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_updated', models.DateTimeField(blank=True, help_text='Last time data was updated from Yodlee', null=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('user', 'User'), ('assistant', 'Assistant'), ('system', 'System')], default='user', max_length=10)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('confidence', models.FloatField(blank=True, null=True)),
                ('tokens_used', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Cryptocurrency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(max_length=10, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('coingecko_id', models.CharField(max_length=50, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staking_available', models.BooleanField(default=False)),
                ('min_trade_amount', models.DecimalField(decimal_places=8, default=0.0001, max_digits=20)),
                ('precision', models.IntegerField(default=8)),
                ('volatility_tier', models.CharField(choices=[('LOW', 'Low Volatility'), ('MEDIUM', 'Medium Volatility'), ('HIGH', 'High Volatility'), ('EXTREME', 'Extreme Volatility')], default='HIGH', max_length=20)),
                ('is_sec_compliant', models.BooleanField(default=False)),
                ('regulatory_status', models.CharField(default='UNKNOWN', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Cryptocurrency',
                'verbose_name_plural': 'Cryptocurrencies',
                'db_table': 'crypto_currencies',
            },
        ),
        migrations.CreateModel(
            name='CustomBenchmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the custom benchmark', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of the benchmark strategy')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the benchmark is active')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='custom_benchmarks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'core_custom_benchmark',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LendingReserve',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ltv', models.DecimalField(decimal_places=4, default=Decimal('0.70'), max_digits=5)),
                ('liquidation_threshold', models.DecimalField(decimal_places=4, default=Decimal('0.75'), max_digits=5)),
                ('liquidation_bonus', models.DecimalField(decimal_places=4, default=Decimal('0.0500'), max_digits=5)),
                ('reserve_factor', models.DecimalField(decimal_places=4, default=Decimal('0.1000'), max_digits=5)),
                ('can_borrow', models.BooleanField(default=True)),
                ('can_be_collateral', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('supply_apy', models.DecimalField(blank=True, decimal_places=6, max_digits=10, null=True)),
                ('variable_borrow_apy', models.DecimalField(blank=True, decimal_places=6, max_digits=10, null=True)),
                ('stable_borrow_apy', models.DecimalField(blank=True, decimal_places=6, max_digits=10, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cryptocurrency', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='reserve', to='core.cryptocurrency')),
            ],
            options={
                'verbose_name': 'Lending Reserve',
                'db_table': 'defi_lending_reserves',
            },
        ),
        migrations.CreateModel(
            name='MarketRegime',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('as_of', models.DateField(db_index=True, unique=True)),
                ('regime', models.CharField(choices=[('BULL', 'Bull Market'), ('BEAR', 'Bear Market'), ('VOLATILE', 'High Volatility'), ('SIDEWAYS', 'Sideways'), ('CRISIS', 'Crisis')], max_length=20)),
                ('confidence', models.FloatField(help_text='Confidence score 0-1')),
                ('vix_level', models.FloatField(blank=True, null=True)),
                ('market_return', models.FloatField(blank=True, null=True)),
                ('volatility', models.FloatField(blank=True, null=True)),
                ('ml_prediction', models.JSONField(blank=True, null=True)),
                ('feature_importance', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('model_version', models.CharField(default='v1.0', max_length=50)),
            ],
            options={
                'ordering': ['-as_of'],
            },
        ),
        migrations.CreateModel(
            name='Portfolio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='My Portfolio', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='portfolios', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SblocBank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('slug', models.SlugField(unique=True)),
                ('logo_url', models.URLField(blank=True)),
                ('min_apr', models.FloatField(default=0.06)),
                ('max_apr', models.FloatField(default=0.12)),
                ('min_ltv', models.FloatField(default=0.3)),
                ('max_ltv', models.FloatField(default=0.5)),
                ('min_loan_usd', models.IntegerField(default=5000)),
                ('regions', models.JSONField(blank=True, default=list)),
                ('notes', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='SblocReferral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('amount_usd', models.IntegerField()),
                ('status', models.CharField(default='DRAFT', max_length=32)),
                ('external_ref', models.CharField(blank=True, max_length=128)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('bank', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.sblocbank')),
            ],
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(max_length=10, unique=True)),
                ('company_name', models.CharField(max_length=200)),
                ('sector', models.CharField(default='Unknown', max_length=100)),
                ('current_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('market_cap', models.BigIntegerField(blank=True, null=True)),
                ('pe_ratio', models.FloatField(blank=True, null=True)),
                ('dividend_yield', models.FloatField(blank=True, null=True)),
                ('debt_ratio', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('volatility', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('beginner_friendly_score', models.IntegerField(blank=True, null=True)),
                ('dividend_score', models.IntegerField(blank=True, help_text='Dividend quality score (0-100)', null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Watchlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.TextField()),
                ('is_public', models.BooleanField(default=False)),
                ('is_shared', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='watchlists', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StockRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allocation', models.FloatField()),
                ('reasoning', models.TextField()),
                ('risk_level', models.CharField(max_length=20)),
                ('expected_return', models.CharField(max_length=20)),
                ('portfolio_recommendation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_recommendations', to='core.aiportfoliorecommendation')),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.stock')),
            ],
        ),
        migrations.CreateModel(
            name='StockDiscussion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('discussion_type', models.CharField(default='general', max_length=20)),
                ('is_analysis', models.BooleanField(default=False)),
                ('analysis_data', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('likes', models.ManyToManyField(blank=True, related_name='liked_discussions', to=settings.AUTH_USER_MODEL)),
                ('stock', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='discussions', to='core.stock')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_discussions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('url', models.URLField()),
                ('snippet', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('message', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sources', to='core.chatmessage')),
            ],
        ),
        migrations.CreateModel(
            name='SmartAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_id', models.CharField(help_text='Unique alert identifier', max_length=100, unique=True)),
                ('alert_type', models.CharField(help_text='Type of alert', max_length=50)),
                ('urgency_level', models.CharField(choices=[('critical', 'Critical - Do Now'), ('important', 'Important - Review Soon'), ('informational', 'Informational - FYI/Coaching')], default='informational', max_length=20)),
                ('priority', models.CharField(choices=[('high', 'High'), ('medium', 'Medium'), ('low', 'Low')], default='medium', max_length=10)),
                ('category', models.CharField(help_text='Alert category', max_length=50)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('coaching_tip', models.TextField()),
                ('trigger_reason', models.TextField(help_text='Why this alert was triggered now')),
                ('details', models.JSONField(default=dict, help_text='Structured alert data')),
                ('suggested_actions', models.JSONField(default=list, help_text='List of suggested actions')),
                ('actionable', models.BooleanField(default=True)),
                ('portfolio_id', models.CharField(blank=True, max_length=50, null=True)),
                ('timeframe', models.CharField(default='1M', max_length=10)),
                ('data_source', models.CharField(default='yodlee', help_text='Source of data (yodlee, calculated, etc.)', max_length=50)),
                ('delivered_in_app', models.BooleanField(default=False)),
                ('delivered_push', models.BooleanField(default=False)),
                ('delivered_email', models.BooleanField(default=False)),
                ('delivered_sms', models.BooleanField(default=False)),
                ('acknowledged', models.BooleanField(default=False)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('dismissed', models.BooleanField(default=False)),
                ('dismissed_at', models.DateTimeField(blank=True, null=True)),
                ('triggered_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this alert expires', null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='smart_alerts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-triggered_at'],
            },
        ),
        migrations.CreateModel(
            name='SblocSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application_url', models.URLField()),
                ('external_session_id', models.CharField(max_length=128)),
                ('status', models.CharField(default='CREATED', max_length=32)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('referral', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.sblocreferral')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('image', models.URLField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PortfolioSnapshot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('as_of', models.DateField(db_index=True)),
                ('holdings', models.JSONField(help_text='Portfolio holdings as of date')),
                ('total_value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('cash_balance', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('daily_return', models.FloatField(blank=True, null=True)),
                ('total_return', models.FloatField(blank=True, null=True)),
                ('volatility', models.FloatField(blank=True, null=True)),
                ('sharpe_ratio', models.FloatField(blank=True, null=True)),
                ('max_drawdown', models.FloatField(blank=True, null=True)),
                ('var_95', models.FloatField(blank=True, help_text='95% VaR', null=True)),
                ('cvar_95', models.FloatField(blank=True, help_text='95% CVaR', null=True)),
                ('beta', models.FloatField(blank=True, null=True)),
                ('tracking_error', models.FloatField(blank=True, null=True)),
                ('sector_allocation', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('source', models.CharField(default='system', max_length=50)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='portfolio_snapshots', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-as_of'],
            },
        ),
        migrations.CreateModel(
            name='PortfolioPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shares', models.DecimalField(decimal_places=2, max_digits=10)),
                ('average_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('portfolio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='positions', to='core.portfolio')),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.stock')),
            ],
        ),
        migrations.CreateModel(
            name='MLModelVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('version', models.CharField(max_length=50)),
                ('model_type', models.CharField(max_length=50)),
                ('file_path', models.CharField(max_length=500)),
                ('parameters', models.JSONField()),
                ('performance_metrics', models.JSONField(blank=True, null=True)),
                ('trained_on', models.DateField()),
                ('training_data_hash', models.CharField(help_text='SHA256 of training data', max_length=64)),
                ('is_active', models.BooleanField(default=False)),
                ('is_production', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MLAnomalyDetection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('anomaly_type', models.CharField(help_text='Type of anomaly detected', max_length=50)),
                ('anomaly_score', models.FloatField(help_text='Anomaly score (0-1, higher = more anomalous)')),
                ('confidence', models.FloatField(help_text='ML model confidence (0-1)')),
                ('description', models.TextField(help_text='Description of the anomaly')),
                ('detected_at', models.DateTimeField(auto_now_add=True)),
                ('time_window', models.CharField(default='30d', help_text='Time window analyzed', max_length=20)),
                ('baseline_period', models.CharField(default='90d', help_text='Baseline period for comparison', max_length=20)),
                ('input_data', models.JSONField(default=dict, help_text='Data used for anomaly detection')),
                ('model_version', models.CharField(default='v1.0', max_length=20)),
                ('alert_generated', models.BooleanField(default=False)),
                ('alert', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ml_anomaly', to='core.smartalert')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ml_anomalies', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-detected_at'],
            },
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='core.post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='IncomeProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age', models.IntegerField()),
                ('income_bracket', models.CharField(max_length=100)),
                ('investment_goals', models.JSONField()),
                ('risk_tolerance', models.CharField(max_length=50)),
                ('investment_horizon', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='incomeProfile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL)),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DiscussionComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('discussion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='core.stockdiscussion')),
                ('likes', models.ManyToManyField(blank=True, related_name='liked_comments', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discussion_comments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CustomBenchmarkHolding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(help_text='Stock symbol (e.g., AAPL)', max_length=20)),
                ('weight', models.DecimalField(decimal_places=4, help_text='Weight in portfolio (0.0000 to 1.0000)', max_digits=5)),
                ('name', models.CharField(blank=True, help_text='Company name', max_length=200)),
                ('sector', models.CharField(blank=True, help_text='Sector classification', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Additional description')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('benchmark', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='holdings', to='core.custombenchmark')),
            ],
            options={
                'db_table': 'core_custom_benchmark_holding',
                'ordering': ['-weight', 'symbol'],
            },
        ),
        migrations.CreateModel(
            name='CryptoTrade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trade_type', models.CharField(choices=[('BUY', 'Buy'), ('SELL', 'Sell'), ('STAKING_REWARD', 'Staking Reward'), ('AIRDROP', 'Airdrop')], max_length=20)),
                ('quantity', models.DecimalField(decimal_places=8, max_digits=20)),
                ('price_per_unit', models.DecimalField(decimal_places=8, max_digits=20)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=20)),
                ('fees', models.DecimalField(decimal_places=2, default=0, max_digits=20)),
                ('order_id', models.CharField(max_length=100, unique=True)),
                ('status', models.CharField(default='COMPLETED', max_length=20)),
                ('execution_time', models.DateTimeField(auto_now_add=True)),
                ('is_sbloc_funded', models.BooleanField(default=False)),
                ('sbloc_loan_id', models.CharField(blank=True, max_length=100, null=True)),
                ('cryptocurrency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.cryptocurrency')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crypto_trades', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'crypto_trades',
                'ordering': ['-execution_time'],
            },
        ),
        migrations.CreateModel(
            name='CryptoSBLOCLoan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collateral_quantity', models.DecimalField(decimal_places=8, max_digits=20)),
                ('collateral_value_at_loan', models.DecimalField(decimal_places=2, max_digits=20)),
                ('loan_amount', models.DecimalField(decimal_places=2, max_digits=20)),
                ('interest_rate', models.DecimalField(decimal_places=4, max_digits=5)),
                ('maintenance_margin', models.DecimalField(decimal_places=4, default=0.5, max_digits=5)),
                ('liquidation_threshold', models.DecimalField(decimal_places=4, default=0.4, max_digits=5)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('LIQUIDATED', 'Liquidated'), ('REPAID', 'Repaid'), ('WARNING', 'Margin Call Warning')], default='ACTIVE', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cryptocurrency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.cryptocurrency')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crypto_sbloc_loans', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'crypto_sbloc_loans',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CryptoPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price_usd', models.DecimalField(decimal_places=8, max_digits=20)),
                ('price_btc', models.DecimalField(blank=True, decimal_places=8, max_digits=20, null=True)),
                ('volume_24h', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True)),
                ('market_cap', models.DecimalField(blank=True, decimal_places=2, max_digits=20, null=True)),
                ('price_change_24h', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('price_change_percentage_24h', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('rsi_14', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('macd', models.DecimalField(blank=True, decimal_places=6, max_digits=10, null=True)),
                ('bollinger_upper', models.DecimalField(blank=True, decimal_places=8, max_digits=20, null=True)),
                ('bollinger_lower', models.DecimalField(blank=True, decimal_places=8, max_digits=20, null=True)),
                ('volatility_7d', models.DecimalField(blank=True, decimal_places=6, max_digits=10, null=True)),
                ('volatility_30d', models.DecimalField(blank=True, decimal_places=6, max_digits=10, null=True)),
                ('momentum_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('sentiment_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('cryptocurrency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prices', to='core.cryptocurrency')),
            ],
            options={
                'db_table': 'crypto_prices',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='CryptoPortfolio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_value_usd', models.DecimalField(decimal_places=2, default=0, max_digits=20)),
                ('total_cost_basis', models.DecimalField(decimal_places=2, default=0, max_digits=20)),
                ('total_pnl', models.DecimalField(decimal_places=2, default=0, max_digits=20)),
                ('total_pnl_percentage', models.DecimalField(decimal_places=4, default=0, max_digits=10)),
                ('portfolio_volatility', models.DecimalField(decimal_places=6, default=0, max_digits=10)),
                ('sharpe_ratio', models.DecimalField(decimal_places=4, default=0, max_digits=10)),
                ('max_drawdown', models.DecimalField(decimal_places=4, default=0, max_digits=10)),
                ('diversification_score', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('top_holding_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='crypto_portfolio', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'crypto_portfolios',
            },
        ),
        migrations.CreateModel(
            name='CryptoMLPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prediction_type', models.CharField(choices=[('BIG_UP_DAY', 'Big Up Day'), ('BIG_DOWN_DAY', 'Big Down Day'), ('VOLATILITY_SPIKE', 'Volatility Spike'), ('TREND_REVERSAL', 'Trend Reversal')], max_length=20)),
                ('probability', models.DecimalField(decimal_places=4, max_digits=5)),
                ('confidence_level', models.CharField(choices=[('LOW', 'Low Confidence'), ('MEDIUM', 'Medium Confidence'), ('HIGH', 'High Confidence')], max_length=20)),
                ('features_used', models.JSONField(default=dict)),
                ('model_version', models.CharField(default='v1.0', max_length=50)),
                ('prediction_horizon_hours', models.IntegerField(default=24)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('was_correct', models.BooleanField(blank=True, null=True)),
                ('actual_return', models.DecimalField(blank=True, decimal_places=6, max_digits=10, null=True)),
                ('cryptocurrency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predictions', to='core.cryptocurrency')),
            ],
            options={
                'db_table': 'crypto_ml_predictions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CryptoHolding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=8, max_digits=20)),
                ('average_cost', models.DecimalField(decimal_places=8, max_digits=20)),
                ('current_price', models.DecimalField(decimal_places=8, max_digits=20)),
                ('current_value', models.DecimalField(decimal_places=2, max_digits=20)),
                ('unrealized_pnl', models.DecimalField(decimal_places=2, max_digits=20)),
                ('unrealized_pnl_percentage', models.DecimalField(decimal_places=4, max_digits=10)),
                ('staked_quantity', models.DecimalField(decimal_places=8, default=0, max_digits=20)),
                ('staking_rewards', models.DecimalField(decimal_places=8, default=0, max_digits=20)),
                ('staking_apy', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('is_collateralized', models.BooleanField(default=False)),
                ('collateral_value', models.DecimalField(decimal_places=2, default=0, max_digits=20)),
                ('loan_amount', models.DecimalField(decimal_places=2, default=0, max_digits=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cryptocurrency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.cryptocurrency')),
                ('portfolio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='holdings', to='core.cryptoportfolio')),
            ],
            options={
                'db_table': 'crypto_holdings',
            },
        ),
        migrations.CreateModel(
            name='CryptoEducationProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('module_name', models.CharField(max_length=100)),
                ('module_type', models.CharField(choices=[('BASIC', 'Basic Concepts'), ('TRADING', 'Trading Strategies'), ('DEFI', 'DeFi Protocols'), ('RISK', 'Risk Management'), ('DEFI_LENDING', 'DeFi Lending')], max_length=20)),
                ('progress_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('is_completed', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('quiz_attempts', models.IntegerField(default=0)),
                ('best_quiz_score', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crypto_education', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'crypto_education_progress',
            },
        ),
        migrations.CreateModel(
            name='CorporateAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(db_index=True, max_length=10)),
                ('action_type', models.CharField(choices=[('DIVIDEND', 'Dividend'), ('SPLIT', 'Stock Split'), ('SPINOFF', 'Spinoff'), ('MERGER', 'Merger'), ('ACQUISITION', 'Acquisition')], max_length=20)),
                ('ex_date', models.DateField(db_index=True)),
                ('record_date', models.DateField(blank=True, null=True)),
                ('payment_date', models.DateField(blank=True, null=True)),
                ('amount', models.DecimalField(blank=True, decimal_places=6, max_digits=10, null=True)),
                ('ratio', models.DecimalField(blank=True, decimal_places=6, max_digits=10, null=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('source', models.CharField(default='api', max_length=50)),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='corporate_actions', to='core.stock')),
            ],
            options={
                'ordering': ['-ex_date', 'symbol'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='core.post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ChatSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_sessions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='chatmessage',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='core.chatsession'),
        ),
        migrations.CreateModel(
            name='BorrowPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=10, default=0, max_digits=28)),
                ('rate_mode', models.CharField(choices=[('VARIABLE', 'Variable'), ('STABLE', 'Stable')], default='VARIABLE', max_length=10)),
                ('apy_at_open', models.DecimalField(blank=True, decimal_places=6, max_digits=10, null=True)),
                ('usd_value_cached', models.DecimalField(decimal_places=2, default=0, max_digits=20)),
                ('opened_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('reserve', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='borrows', to='core.lendingreserve')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='defi_borrows', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'defi_borrow_positions',
            },
        ),
        migrations.CreateModel(
            name='BenchmarkPerformanceHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('benchmark_type', models.CharField(choices=[('standard', 'Standard Benchmark'), ('custom', 'Custom Benchmark')], max_length=50)),
                ('benchmark_id', models.CharField(help_text='ID of the benchmark (symbol or custom benchmark ID)', max_length=100)),
                ('benchmark_name', models.CharField(help_text='Name of the benchmark', max_length=200)),
                ('timeframe', models.CharField(choices=[('1D', '1 Day'), ('1W', '1 Week'), ('1M', '1 Month'), ('3M', '3 Months'), ('1Y', '1 Year'), ('All', 'All Time')], max_length=10)),
                ('date', models.DateField(help_text='Date of the performance data')),
                ('value', models.DecimalField(decimal_places=4, help_text='Benchmark value on this date', max_digits=15)),
                ('return_percent', models.DecimalField(decimal_places=4, help_text='Daily return percentage', max_digits=8)),
                ('volume', models.BigIntegerField(blank=True, help_text='Trading volume', null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'core_benchmark_performance_history',
                'ordering': ['-date', 'benchmark_id'],
                'indexes': [models.Index(fields=['benchmark_id', 'timeframe', 'date'], name='core_benchm_benchma_5392a2_idx'), models.Index(fields=['date'], name='core_benchm_date_645e7e_idx')],
                'unique_together': {('benchmark_id', 'timeframe', 'date')},
            },
        ),
        migrations.CreateModel(
            name='BenchmarkComparison',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('portfolio_id', models.CharField(help_text='Portfolio identifier', max_length=100)),
                ('benchmark_id', models.CharField(help_text='Benchmark identifier', max_length=100)),
                ('benchmark_name', models.CharField(help_text='Benchmark name', max_length=200)),
                ('timeframe', models.CharField(choices=[('1D', '1 Day'), ('1W', '1 Week'), ('1M', '1 Month'), ('3M', '3 Months'), ('1Y', '1 Year'), ('All', 'All Time')], max_length=10)),
                ('comparison_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('portfolio_return', models.DecimalField(decimal_places=4, help_text='Portfolio return percentage', max_digits=8)),
                ('benchmark_return', models.DecimalField(decimal_places=4, help_text='Benchmark return percentage', max_digits=8)),
                ('excess_return', models.DecimalField(decimal_places=4, help_text='Excess return percentage', max_digits=8)),
                ('portfolio_volatility', models.DecimalField(decimal_places=4, help_text='Portfolio volatility', max_digits=8)),
                ('benchmark_volatility', models.DecimalField(decimal_places=4, help_text='Benchmark volatility', max_digits=8)),
                ('tracking_error', models.DecimalField(decimal_places=4, help_text='Tracking error', max_digits=8)),
                ('portfolio_sharpe', models.DecimalField(decimal_places=4, help_text='Portfolio Sharpe ratio', max_digits=8)),
                ('benchmark_sharpe', models.DecimalField(decimal_places=4, help_text='Benchmark Sharpe ratio', max_digits=8)),
                ('information_ratio', models.DecimalField(decimal_places=4, help_text='Information ratio', max_digits=8)),
                ('beta', models.DecimalField(decimal_places=4, help_text='Beta', max_digits=8)),
                ('correlation', models.DecimalField(decimal_places=4, help_text='Correlation coefficient', max_digits=8)),
                ('r_squared', models.DecimalField(decimal_places=4, help_text='R-squared', max_digits=8)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='benchmark_comparisons', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'core_benchmark_comparison',
                'ordering': ['-comparison_date', 'user'],
            },
        ),
        migrations.CreateModel(
            name='BenchmarkAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('benchmark_type', models.CharField(choices=[('standard', 'Standard Benchmark'), ('custom', 'Custom Benchmark')], max_length=50)),
                ('benchmark_id', models.CharField(help_text='ID of the benchmark', max_length=100)),
                ('benchmark_name', models.CharField(help_text='Name of the benchmark', max_length=200)),
                ('timeframe', models.CharField(choices=[('1D', '1 Day'), ('1W', '1 Week'), ('1M', '1 Month'), ('3M', '3 Months'), ('1Y', '1 Year'), ('All', 'All Time')], max_length=10)),
                ('calculation_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('total_return_percent', models.DecimalField(decimal_places=4, help_text='Total return percentage', max_digits=8)),
                ('volatility', models.DecimalField(decimal_places=4, help_text='Annualized volatility', max_digits=8)),
                ('sharpe_ratio', models.DecimalField(decimal_places=4, help_text='Sharpe ratio', max_digits=8)),
                ('max_drawdown', models.DecimalField(decimal_places=4, help_text='Maximum drawdown percentage', max_digits=8)),
                ('beta', models.DecimalField(blank=True, decimal_places=4, help_text='Beta relative to market', max_digits=8, null=True)),
                ('alpha', models.DecimalField(blank=True, decimal_places=4, help_text='Alpha', max_digits=8, null=True)),
                ('information_ratio', models.DecimalField(blank=True, decimal_places=4, help_text='Information ratio', max_digits=8, null=True)),
                ('sortino_ratio', models.DecimalField(blank=True, decimal_places=4, help_text='Sortino ratio', max_digits=8, null=True)),
                ('calmar_ratio', models.DecimalField(blank=True, decimal_places=4, help_text='Calmar ratio', max_digits=8, null=True)),
                ('var_95', models.DecimalField(blank=True, decimal_places=4, help_text='95% Value at Risk', max_digits=8, null=True)),
                ('var_99', models.DecimalField(blank=True, decimal_places=4, help_text='99% Value at Risk', max_digits=8, null=True)),
                ('cvar_95', models.DecimalField(blank=True, decimal_places=4, help_text='95% Conditional VaR', max_digits=8, null=True)),
                ('cvar_99', models.DecimalField(blank=True, decimal_places=4, help_text='99% Conditional VaR', max_digits=8, null=True)),
                ('skewness', models.DecimalField(blank=True, decimal_places=4, help_text='Skewness', max_digits=8, null=True)),
                ('kurtosis', models.DecimalField(blank=True, decimal_places=4, help_text='Kurtosis', max_digits=8, null=True)),
                ('excess_kurtosis', models.DecimalField(blank=True, decimal_places=4, help_text='Excess kurtosis', max_digits=8, null=True)),
            ],
            options={
                'db_table': 'core_benchmark_analytics',
                'ordering': ['-calculation_date', 'benchmark_id'],
                'indexes': [models.Index(fields=['benchmark_id', 'timeframe'], name='core_benchm_benchma_274b9c_idx'), models.Index(fields=['calculation_date'], name='core_benchm_calcula_bc454d_idx')],
                'unique_together': {('benchmark_id', 'timeframe', 'calculation_date')},
            },
        ),
        migrations.CreateModel(
            name='BankTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_id', models.CharField(help_text='Yodlee transaction ID', max_length=64)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Transaction amount', max_digits=15)),
                ('description', models.TextField(blank=True, help_text='Transaction description')),
                ('merchant_name', models.CharField(blank=True, help_text='Merchant name if available', max_length=128)),
                ('category', models.CharField(blank=True, help_text='Transaction category', max_length=64)),
                ('subcategory', models.CharField(blank=True, help_text='Transaction subcategory', max_length=64)),
                ('date', models.DateField(help_text='Transaction date')),
                ('post_date', models.DateField(blank=True, help_text='Post date', null=True)),
                ('type', models.CharField(choices=[('DEBIT', 'Debit'), ('CREDIT', 'Credit')], max_length=32)),
                ('base_type', models.CharField(blank=True, help_text='Yodlee base type', max_length=32)),
                ('status', models.CharField(choices=[('posted', 'Posted'), ('pending', 'Pending'), ('cancelled', 'Cancelled')], default='posted', max_length=32)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='core.bankaccount')),
            ],
            options={
                'ordering': ['-date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BankLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider_account_id', models.CharField(help_text='Yodlee provider account ID', max_length=64, unique=True)),
                ('institution_name', models.CharField(blank=True, help_text='Bank/institution name', max_length=128)),
                ('institution_id', models.CharField(blank=True, help_text='Yodlee institution ID', max_length=64)),
                ('status', models.CharField(choices=[('linked', 'Linked'), ('active', 'Active'), ('inactive', 'Inactive'), ('error', 'Error'), ('expired', 'Expired')], default='linked', max_length=32)),
                ('last_sync', models.DateTimeField(blank=True, help_text='Last successful data sync', null=True)),
                ('last_refresh', models.DateTimeField(blank=True, help_text='Last refresh attempt', null=True)),
                ('error_message', models.TextField(blank=True, help_text='Last error message if any')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bank_links', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='bankaccount',
            name='link',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accounts', to='core.banklink'),
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('ML_RECOMMENDATION', 'ML Portfolio Recommendation'), ('INSTITUTIONAL_RECOMMENDATION', 'Institutional Portfolio Recommendation'), ('MARKET_ANALYSIS', 'Market Analysis'), ('RISK_ANALYSIS', 'Risk Analysis'), ('OPTIMIZATION', 'Portfolio Optimization')], max_length=50)),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('request_id', models.CharField(max_length=100, unique=True)),
                ('input_data', models.JSONField()),
                ('output_data', models.JSONField(blank=True, null=True)),
                ('execution_time_ms', models.IntegerField(blank=True, null=True)),
                ('memory_usage_mb', models.FloatField(blank=True, null=True)),
                ('success', models.BooleanField()),
                ('error_message', models.TextField(blank=True)),
                ('model_version', models.CharField(blank=True, max_length=50)),
                ('feature_version', models.CharField(blank=True, max_length=50)),
                ('optimization_method', models.CharField(blank=True, max_length=50)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='AlertThreshold',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(help_text="Type of alert (e.g., 'performance_underperformance')", max_length=50)),
                ('performance_diff_threshold', models.FloatField(default=2.0, help_text='Alert if under/outperforming by this %')),
                ('sharpe_min_threshold', models.FloatField(default=0.5, help_text='Minimum acceptable Sharpe ratio')),
                ('volatility_max_threshold', models.FloatField(default=20.0, help_text='Maximum acceptable volatility %')),
                ('drawdown_max_threshold', models.FloatField(default=-15.0, help_text='Maximum acceptable drawdown %')),
                ('var95_max_threshold', models.FloatField(default=-3.0, help_text='Maximum acceptable 95% VaR %')),
                ('tech_weight_max_threshold', models.FloatField(default=0.35, help_text='Maximum tech sector weight')),
                ('cash_min_threshold', models.FloatField(default=0.02, help_text='Minimum cash position %')),
                ('cash_max_threshold', models.FloatField(default=0.2, help_text='Maximum cash position %')),
                ('concentration_max_threshold', models.FloatField(default=0.15, help_text='Maximum single stock concentration %')),
                ('sector_concentration_max_threshold', models.FloatField(default=0.4, help_text='Maximum sector concentration %')),
                ('trading_frequency_max_threshold', models.IntegerField(default=10, help_text='Maximum trades per 30 days')),
                ('expense_ratio_max_threshold', models.FloatField(default=0.9, help_text='Maximum expense ratio %')),
                ('cooldown_period', models.IntegerField(default=168, help_text='Hours before same alert can trigger again')),
                ('enabled', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alert_thresholds', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AlertSuppression',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(max_length=50)),
                ('last_triggered_at', models.DateTimeField()),
                ('suppression_until', models.DateTimeField(help_text='Suppress this alert type until this time')),
                ('trigger_count', models.IntegerField(default=1, help_text='Number of times this alert has been triggered')),
                ('portfolio_id', models.CharField(blank=True, max_length=50, null=True)),
                ('suppression_reason', models.CharField(default='cooldown_period', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alert_suppressions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AlertDeliveryPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_category', models.CharField(help_text="Alert category (e.g., 'performance', 'risk')", max_length=50)),
                ('priority_level', models.CharField(choices=[('critical', 'Critical'), ('important', 'Important'), ('informational', 'Informational')], max_length=20)),
                ('delivery_method', models.CharField(choices=[('in_app', 'In-App Only'), ('push', 'Push Notifications'), ('email', 'Email'), ('sms', 'SMS'), ('all', 'All Methods')], default='in_app', max_length=20)),
                ('quiet_hours_enabled', models.BooleanField(default=True)),
                ('quiet_hours_start', models.TimeField(default='22:00')),
                ('quiet_hours_end', models.TimeField(default='08:00')),
                ('max_alerts_per_day', models.IntegerField(default=10, help_text='Maximum alerts per day for this category')),
                ('digest_frequency', models.CharField(choices=[('immediate', 'Immediate'), ('daily', 'Daily'), ('weekly', 'Weekly')], default='daily', max_length=20)),
                ('enabled', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alert_delivery_preferences', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AlertDeliveryHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delivery_method', models.CharField(choices=[('in_app', 'In-App Only'), ('push', 'Push Notifications'), ('email', 'Email'), ('sms', 'SMS'), ('all', 'All Methods')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('failed', 'Failed'), ('bounced', 'Bounced')], default='pending', max_length=20)),
                ('delivery_attempted_at', models.DateTimeField(auto_now_add=True)),
                ('delivery_confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('external_id', models.CharField(blank=True, help_text='ID from external service (push notification, email, etc.)', max_length=100, null=True)),
                ('alert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='delivery_history', to='core.smartalert')),
            ],
        ),
        migrations.CreateModel(
            name='WatchlistItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField()),
                ('target_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.stock')),
                ('watchlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='core.watchlist')),
            ],
            options={
                'unique_together': {('watchlist', 'stock')},
            },
        ),
        migrations.CreateModel(
            name='TickerFollow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(db_index=True, max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticker_follows', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'symbol'], name='core_ticker_user_id_1fbaa2_idx'), models.Index(fields=['symbol'], name='core_ticker_symbol_6e7b6e_idx')],
                'unique_together': {('user', 'symbol')},
            },
        ),
        migrations.CreateModel(
            name='SupplyPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=10, default=0, max_digits=28)),
                ('use_as_collateral', models.BooleanField(default=True)),
                ('usd_value_cached', models.DecimalField(decimal_places=2, default=0, max_digits=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reserve', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='supplies', to='core.lendingreserve')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='defi_supplies', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'defi_supply_positions',
                'indexes': [models.Index(fields=['user', 'reserve'], name='defi_supply_user_id_6eebe4_idx')],
                'unique_together': {('user', 'reserve')},
            },
        ),
        migrations.CreateModel(
            name='StockPriceSnapshot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(db_index=True, max_length=10)),
                ('as_of', models.DateField(db_index=True)),
                ('open_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('high_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('low_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('close', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('volume', models.BigIntegerField(blank=True, null=True)),
                ('adjusted_close', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('dividend_amount', models.DecimalField(decimal_places=4, default=0, max_digits=10)),
                ('split_coefficient', models.DecimalField(decimal_places=6, default=1.0, max_digits=10)),
                ('adv_score', models.FloatField(blank=True, help_text='Average Daily Volume score', null=True)),
                ('volatility', models.FloatField(blank=True, help_text='30-day volatility', null=True)),
                ('beta', models.FloatField(blank=True, help_text='Beta vs market', null=True)),
                ('market_cap', models.BigIntegerField(blank=True, null=True)),
                ('pe_ratio', models.FloatField(blank=True, null=True)),
                ('dividend_yield', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source', models.CharField(default='api', help_text='Data source', max_length=50)),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='price_snapshots', to='core.stock')),
            ],
            options={
                'ordering': ['-as_of', 'symbol'],
                'indexes': [models.Index(fields=['symbol', 'as_of'], name='core_stockp_symbol_ae6b7f_idx'), models.Index(fields=['as_of', 'symbol'], name='core_stockp_as_of_9d453b_idx')],
                'unique_together': {('stock', 'as_of')},
            },
        ),
        migrations.CreateModel(
            name='StockData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('open_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('high_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('low_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('close_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('volume', models.BigIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_data', to='core.stock')),
            ],
            options={
                'unique_together': {('stock', 'date')},
            },
        ),
        migrations.AddIndex(
            model_name='smartalert',
            index=models.Index(fields=['user', 'triggered_at'], name='core_smarta_user_id_52b4a1_idx'),
        ),
        migrations.AddIndex(
            model_name='smartalert',
            index=models.Index(fields=['user', 'urgency_level', 'acknowledged'], name='core_smarta_user_id_65dd67_idx'),
        ),
        migrations.AddIndex(
            model_name='smartalert',
            index=models.Index(fields=['alert_type', 'triggered_at'], name='core_smarta_alert_t_c92810_idx'),
        ),
        migrations.AddIndex(
            model_name='portfoliosnapshot',
            index=models.Index(fields=['user', 'as_of'], name='core_portfo_user_id_08019c_idx'),
        ),
        migrations.AddIndex(
            model_name='portfoliosnapshot',
            index=models.Index(fields=['as_of'], name='core_portfo_as_of_27b370_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='portfoliosnapshot',
            unique_together={('user', 'as_of')},
        ),
        migrations.AlterUniqueTogether(
            name='mlmodelversion',
            unique_together={('name', 'version')},
        ),
        migrations.AddIndex(
            model_name='mlanomalydetection',
            index=models.Index(fields=['user', 'detected_at'], name='core_mlanom_user_id_3456df_idx'),
        ),
        migrations.AddIndex(
            model_name='mlanomalydetection',
            index=models.Index(fields=['anomaly_type', 'anomaly_score'], name='core_mlanom_anomaly_cb68ea_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='like',
            unique_together={('user', 'post')},
        ),
        migrations.AddIndex(
            model_name='lendingreserve',
            index=models.Index(fields=['is_active'], name='defi_lendin_is_acti_cc9ec5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='follow',
            unique_together={('follower', 'following')},
        ),
        migrations.AlterUniqueTogether(
            name='custombenchmarkholding',
            unique_together={('benchmark', 'symbol')},
        ),
        migrations.AlterUniqueTogether(
            name='custombenchmark',
            unique_together={('user', 'name')},
        ),
        migrations.AddIndex(
            model_name='cryptotrade',
            index=models.Index(fields=['user', '-execution_time'], name='crypto_trad_user_id_657f29_idx'),
        ),
        migrations.AddIndex(
            model_name='cryptotrade',
            index=models.Index(fields=['cryptocurrency', '-execution_time'], name='crypto_trad_cryptoc_7a1795_idx'),
        ),
        migrations.AddIndex(
            model_name='cryptoprice',
            index=models.Index(fields=['cryptocurrency', '-timestamp'], name='crypto_pric_cryptoc_81a4df_idx'),
        ),
        migrations.AddIndex(
            model_name='cryptoprice',
            index=models.Index(fields=['-timestamp'], name='crypto_pric_timesta_d48558_idx'),
        ),
        migrations.AddIndex(
            model_name='cryptomlprediction',
            index=models.Index(fields=['cryptocurrency', '-created_at'], name='crypto_ml_p_cryptoc_d69152_idx'),
        ),
        migrations.AddIndex(
            model_name='cryptomlprediction',
            index=models.Index(fields=['prediction_type', '-created_at'], name='crypto_ml_p_predict_c95862_idx'),
        ),
        migrations.AddIndex(
            model_name='cryptomlprediction',
            index=models.Index(fields=['expires_at'], name='crypto_ml_p_expires_7d63ac_idx'),
        ),
        migrations.AddIndex(
            model_name='cryptoholding',
            index=models.Index(fields=['portfolio', 'cryptocurrency'], name='crypto_hold_portfol_d20041_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='cryptoholding',
            unique_together={('portfolio', 'cryptocurrency')},
        ),
        migrations.AlterUniqueTogether(
            name='cryptoeducationprogress',
            unique_together={('user', 'module_name')},
        ),
        migrations.AddIndex(
            model_name='corporateaction',
            index=models.Index(fields=['symbol', 'ex_date'], name='core_corpor_symbol_b28e92_idx'),
        ),
        migrations.AddIndex(
            model_name='corporateaction',
            index=models.Index(fields=['ex_date', 'action_type'], name='core_corpor_ex_date_27d806_idx'),
        ),
        migrations.AddIndex(
            model_name='borrowposition',
            index=models.Index(fields=['user', 'reserve', 'is_active'], name='defi_borrow_user_id_a99bf7_idx'),
        ),
        migrations.AddIndex(
            model_name='borrowposition',
            index=models.Index(fields=['opened_at'], name='defi_borrow_opened__65e515_idx'),
        ),
        migrations.AddIndex(
            model_name='benchmarkcomparison',
            index=models.Index(fields=['user', 'benchmark_id', 'timeframe'], name='core_benchm_user_id_a3b9a9_idx'),
        ),
        migrations.AddIndex(
            model_name='benchmarkcomparison',
            index=models.Index(fields=['comparison_date'], name='core_benchm_compari_0cc082_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='benchmarkcomparison',
            unique_together={('user', 'portfolio_id', 'benchmark_id', 'timeframe', 'comparison_date')},
        ),
        migrations.AddIndex(
            model_name='banktransaction',
            index=models.Index(fields=['account', 'date'], name='core_banktr_account_356be4_idx'),
        ),
        migrations.AddIndex(
            model_name='banktransaction',
            index=models.Index(fields=['date'], name='core_banktr_date_2ac661_idx'),
        ),
        migrations.AddIndex(
            model_name='banktransaction',
            index=models.Index(fields=['category'], name='core_banktr_categor_92af26_idx'),
        ),
        migrations.AddIndex(
            model_name='banktransaction',
            index=models.Index(fields=['type'], name='core_banktr_type_956ead_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='banktransaction',
            unique_together={('account', 'transaction_id')},
        ),
        migrations.AddIndex(
            model_name='banklink',
            index=models.Index(fields=['user', 'status'], name='core_bankli_user_id_245cf5_idx'),
        ),
        migrations.AddIndex(
            model_name='banklink',
            index=models.Index(fields=['provider_account_id'], name='core_bankli_provide_63ca92_idx'),
        ),
        migrations.AddIndex(
            model_name='banklink',
            index=models.Index(fields=['last_sync'], name='core_bankli_last_sy_e49934_idx'),
        ),
        migrations.AddIndex(
            model_name='bankaccount',
            index=models.Index(fields=['link', 'type'], name='core_bankac_link_id_f5cf1f_idx'),
        ),
        migrations.AddIndex(
            model_name='bankaccount',
            index=models.Index(fields=['account_id'], name='core_bankac_account_75fc82_idx'),
        ),
        migrations.AddIndex(
            model_name='bankaccount',
            index=models.Index(fields=['last_updated'], name='core_bankac_last_up_0e4394_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='bankaccount',
            unique_together={('link', 'account_id')},
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['user', 'timestamp'], name='core_auditl_user_id_7b678c_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['action_type', 'timestamp'], name='core_auditl_action__64f4df_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['timestamp'], name='core_auditl_timesta_80074f_idx'),
        ),
        migrations.AddIndex(
            model_name='alertthreshold',
            index=models.Index(fields=['user', 'alert_type'], name='core_alertt_user_id_2a24b3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='alertthreshold',
            unique_together={('user', 'alert_type')},
        ),
        migrations.AddIndex(
            model_name='alertsuppression',
            index=models.Index(fields=['user', 'alert_type'], name='core_alerts_user_id_147aab_idx'),
        ),
        migrations.AddIndex(
            model_name='alertsuppression',
            index=models.Index(fields=['suppression_until'], name='core_alerts_suppres_396fa5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='alertsuppression',
            unique_together={('user', 'alert_type', 'portfolio_id')},
        ),
        migrations.AddIndex(
            model_name='alertdeliverypreference',
            index=models.Index(fields=['user', 'alert_category'], name='core_alertd_user_id_37c361_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='alertdeliverypreference',
            unique_together={('user', 'alert_category', 'priority_level')},
        ),
        migrations.AddIndex(
            model_name='alertdeliveryhistory',
            index=models.Index(fields=['alert', 'delivery_method'], name='core_alertd_alert_i_1b463b_idx'),
        ),
        migrations.AddIndex(
            model_name='alertdeliveryhistory',
            index=models.Index(fields=['status', 'delivery_attempted_at'], name='core_alertd_status_02afe1_idx'),
        ),
    ]
