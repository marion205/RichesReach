# Enhanced GraphQL Schema with Connections & Structured Errors
scalar Decimal
scalar DateTime
scalar JSON

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type TradeEdge {
  node: CryptoTrade!
  cursor: String!
}

type TradeConnection {
  edges: [TradeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type MutationError {
  code: String!
  message: String!
  retryable: Boolean!
  field: String
}

type ExecuteTradeResult {
  success: Boolean!
  tradeId: ID
  orderId: String
  error: MutationError
  executionTime: DateTime
  fees: Decimal!
  slippage: Decimal!
  netProceeds: Decimal!
}

type RepaySblocLoanResult {
  success: Boolean!
  message: String
  newOutstanding: Float!
  interestPaid: Float!
  principalPaid: Float!
  loan: SblocLoan
  error: MutationError
}

type SblocLoan {
  id: ID!
  status: String!
  collateralQuantity: String!
  collateralValueAtLoan: Float!
  loanAmount: Float!
  interestRate: Float!
  maintenanceMargin: Float!
  liquidationThreshold: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  cryptocurrency: Cryptocurrency!
  ltv: Float!
  riskTier: String!
  riskMessage: String!
}

type CryptoTrade {
  id: ID!
  tradeType: String!
  quantity: Float!
  pricePerUnit: Float!
  totalAmount: Float!
  fees: Float!
  orderId: String
  status: String!
  executionTime: DateTime
  isSblocFunded: Boolean!
  sblocLoanId: ID
  cryptocurrency: Cryptocurrency!
}

type Cryptocurrency {
  id: ID!
  symbol: String!
  name: String!
  coingeckoId: String
  isStakingAvailable: Boolean!
  minTradeAmount: Float!
  precision: Int!
  volatilityTier: String!
  isSecCompliant: Boolean!
  regulatoryStatus: String
}

type CryptoPrice {
  id: ID!
  priceUsd: Float!
  priceBtc: Float
  volume24h: Float
  marketCap: Float
  priceChange24h: Float
  priceChangePercentage24h: Float
  rsi14: Float
  volatility7d: Float
  volatility30d: Float
  momentumScore: Float
  sentimentScore: Float
  timestamp: DateTime!
}

type CryptoHolding {
  id: ID!
  quantity: Float!
  averageCost: Float!
  currentPrice: Float!
  currentValue: Float!
  unrealizedPnl: Float!
  unrealizedPnlPercentage: Float!
  stakedQuantity: Float!
  stakingRewards: Float!
  stakingApy: Float
  isCollateralized: Boolean!
  collateralValue: Float!
  loanAmount: Float!
  cryptocurrency: Cryptocurrency!
}

type CryptoPortfolio {
  id: ID!
  totalValueUsd: Float!
  totalCostBasis: Float!
  totalPnl: Float!
  totalPnlPercentage: Float!
  totalPnl1d: Float!
  totalPnlPct1d: Float!
  totalPnl1w: Float!
  totalPnlPct1w: Float!
  totalPnl1m: Float!
  totalPnlPct1m: Float!
  portfolioVolatility: Float!
  sharpeRatio: Float!
  maxDrawdown: Float!
  diversificationScore: Float!
  topHoldingPercentage: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  holdings: [CryptoHolding!]!
  risk: PortfolioRisk!
}

type PortfolioRisk {
  ltv: Float!
  riskTier: String!
  riskMessage: String!
  marginCallAmount: Float!
  additionalCollateralNeeded: Float!
  stressTestResults: [StressTestResult!]!
}

type StressTestResult {
  shock: Float!
  ltvPct: Float!
  tier: String!
}

type CryptoMlSignal {
  symbol: String!
  predictionType: String!
  probability: Float!
  confidenceLevel: String!
  sentiment: String!
  sentimentDescription: String!
  explanation: String!
  featuresUsed: JSON!
  createdAt: DateTime!
  expiresAt: DateTime!
}

type Query {
  # Paginated trades with connections
  cryptoTrades(
    symbol: String
    first: Int = 25
    after: String
    last: Int
    before: String
  ): TradeConnection!
  
  # Portfolio with risk metrics
  cryptoPortfolio: CryptoPortfolio
  
  # SBLOC loans with risk assessment
  cryptoSblocLoans: [SblocLoan!]!
  cryptoSblocLoansBySymbol(symbol: String!): [SblocLoan!]!
  
  # Market data
  cryptoPrice(symbol: String!): CryptoPrice
  cryptoPrices(symbols: [String!]!): [CryptoPrice!]!
  
  # ML signals
  cryptoMlSignal(symbol: String!): CryptoMlSignal
  cryptoMlSignals(symbols: [String!]!): [CryptoMlSignal!]!
  
  # Supported currencies
  supportedCurrencies: [Cryptocurrency!]!
}

type Mutation {
  # Enhanced trade execution with validation
  executeCryptoTrade(
    symbol: String!
    tradeType: String!
    quantity: Float!
    orderType: String!
    timeInForce: String!
    pricePerUnit: Float
    triggerPrice: Float
    clientOrderId: String
  ): ExecuteTradeResult!
  
  # SBLOC operations
  createSblocLoan(
    symbol: String!
    collateralQuantity: Float!
    loanAmount: Float!
  ): RepaySblocLoanResult!
  
  repaySblocLoan(
    loanId: ID!
    amountUsd: Float!
  ): RepaySblocLoanResult!
  
  addCollateral(
    loanId: ID!
    additionalQuantity: Float!
  ): RepaySblocLoanResult!
  
  # ML operations
  generateMlPrediction(symbol: String!): CryptoMlSignal!
}

# JSON scalar for flexible data
scalar JSON
