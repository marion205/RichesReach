{
    "family": "populate-stocks-task",
    "networkMode": "awsvpc",
    "requiresCompatibilities": ["FARGATE"],
    "cpu": "512",
    "memory": "1024",
    "executionRoleArn": "arn:aws:iam::498606688292:role/ecsTaskExecutionRole",
    "taskRoleArn": "arn:aws:iam::498606688292:role/ecsTaskRole",
    "containerDefinitions": [
        {
            "name": "populate-stocks",
            "image": "498606688292.dkr.ecr.us-east-1.amazonaws.com/riches-reach-ai:latest",
            "essential": true,
            "command": [
                "cd /app && python3 - <<'PY'\nimport os\nimport sys\nimport django\nfrom decimal import Decimal\n\n# Setup Django\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'richesreach.settings')\ndjango.setup()\n\nfrom core.models import Stock\n\n# Popular stocks to populate\nPOPULAR_STOCKS = [\n    {'symbol': 'AAPL', 'company_name': 'Apple Inc.', 'sector': 'Technology'},\n    {'symbol': 'MSFT', 'company_name': 'Microsoft Corporation', 'sector': 'Technology'},\n    {'symbol': 'GOOGL', 'company_name': 'Alphabet Inc.', 'sector': 'Communication Services'},\n    {'symbol': 'TSLA', 'company_name': 'Tesla, Inc.', 'sector': 'Automotive'},\n    {'symbol': 'AMZN', 'company_name': 'Amazon.com, Inc.', 'sector': 'Consumer Discretionary'},\n    {'symbol': 'META', 'company_name': 'Meta Platforms, Inc.', 'sector': 'Communication Services'},\n    {'symbol': 'NVDA', 'company_name': 'NVIDIA Corporation', 'sector': 'Technology'},\n    {'symbol': 'JPM', 'company_name': 'JPMorgan Chase & Co.', 'sector': 'Financial Services'},\n    {'symbol': 'JNJ', 'company_name': 'Johnson & Johnson', 'sector': 'Healthcare'},\n    {'symbol': 'PG', 'company_name': 'Procter & Gamble Co.', 'sector': 'Consumer Staples'},\n    {'symbol': 'V', 'company_name': 'Visa Inc.', 'sector': 'Financial Services'},\n    {'symbol': 'MA', 'company_name': 'Mastercard Inc.', 'sector': 'Financial Services'},\n    {'symbol': 'HD', 'company_name': 'Home Depot, Inc.', 'sector': 'Consumer Discretionary'},\n    {'symbol': 'UNH', 'company_name': 'UnitedHealth Group Inc.', 'sector': 'Healthcare'},\n    {'symbol': 'BAC', 'company_name': 'Bank of America Corp.', 'sector': 'Financial Services'},\n]\n\n# Beginner-friendly scores (based on stability, dividend history, volatility)\nBEGINNER_SCORES = {\n    'AAPL': 85, 'MSFT': 82, 'GOOGL': 78, 'TSLA': 65, 'AMZN': 72,\n    'META': 68, 'NVDA': 58, 'JPM': 88, 'JNJ': 92, 'PG': 90,\n    'V': 80, 'MA': 82, 'HD': 75, 'UNH': 85, 'BAC': 70\n}\n\n# Dividend scores (based on dividend history and yield)\nDIVIDEND_SCORES = {\n    'AAPL': 65, 'MSFT': 78, 'GOOGL': 0, 'TSLA': 0, 'AMZN': 0,\n    'META': 0, 'NVDA': 25, 'JPM': 85, 'JNJ': 95, 'PG': 92,\n    'V': 0, 'MA': 0, 'HD': 70, 'UNH': 75, 'BAC': 80\n}\n\n# Mock current prices (will be replaced with real data later)\nMOCK_PRICES = {\n    'AAPL': 175.50, 'MSFT': 380.25, 'GOOGL': 142.30, 'TSLA': 245.80, 'AMZN': 155.75,\n    'META': 320.45, 'NVDA': 485.20, 'JPM': 165.30, 'JNJ': 158.90, 'PG': 152.40,\n    'V': 245.60, 'MA': 420.80, 'HD': 315.20, 'UNH': 485.70, 'BAC': 32.15\n}\n\nprint('🚀 Starting stock data population...')\n\nfor stock_data in POPULAR_STOCKS:\n    symbol = stock_data['symbol']\n    print(f'📊 Processing {symbol}...')\n    \n    try:\n        # Create or update stock record\n        stock, created = Stock.objects.get_or_create(\n            symbol=symbol,\n            defaults={\n                'company_name': stock_data['company_name'],\n                'sector': stock_data['sector'],\n                'current_price': MOCK_PRICES.get(symbol),\n                'beginner_friendly_score': BEGINNER_SCORES.get(symbol, 70),\n                'dividend_score': DIVIDEND_SCORES.get(symbol, 0),\n                'market_cap': None,  # Will be populated by API later\n                'pe_ratio': None,    # Will be populated by API later\n                'dividend_yield': None,  # Will be populated by API later\n            }\n        )\n        \n        if not created:\n            # Update existing stock\n            stock.current_price = MOCK_PRICES.get(symbol)\n            stock.beginner_friendly_score = BEGINNER_SCORES.get(symbol, 70)\n            stock.dividend_score = DIVIDEND_SCORES.get(symbol, 0)\n            stock.save()\n            print(f'   ✅ Updated {symbol}')\n        else:\n            print(f'   ✅ Created {symbol}')\n            \n    except Exception as e:\n        print(f'   ❌ Error processing {symbol}: {e}')\n\nprint(f'\\n🎉 Stock population complete!')\nprint(f'📈 Total stocks in database: {Stock.objects.count()}')\n\n# Show beginner-friendly stocks\nbeginner_stocks = Stock.objects.filter(beginner_friendly_score__gte=80).order_by('-beginner_friendly_score')\nprint(f'\\n🌟 Beginner-friendly stocks (score >= 80):')\nfor stock in beginner_stocks:\n    print(f'   {stock.symbol}: {stock.beginner_friendly_score}% (${stock.current_price or \"N/A\"})')\n\nprint('\\n✅ Stock population completed successfully!')\nPY"
            ],
            "environment": [
                {
                    "name": "DJANGO_SETTINGS_MODULE",
                    "value": "richesreach.settings"
                },
                {
                    "name": "DEBUG",
                    "value": "False"
                }
            ],
            "secrets": [
                {
                    "name": "DJANGO_DB_ENGINE",
                    "valueFrom": "arn:aws:secretsmanager:us-east-1:498606688292:secret:rr/db/master-user-final-KH5oJn:ENGINE::"
                },
                {
                    "name": "DJANGO_DB_NAME",
                    "valueFrom": "arn:aws:secretsmanager:us-east-1:498606688292:secret:rr/db/master-user-final-KH5oJn:NAME::"
                },
                {
                    "name": "DJANGO_DB_USER",
                    "valueFrom": "arn:aws:secretsmanager:us-east-1:498606688292:secret:rr/db/master-user-final-KH5oJn:USER::"
                },
                {
                    "name": "DJANGO_DB_PASSWORD",
                    "valueFrom": "arn:aws:secretsmanager:us-east-1:498606688292:secret:rr/db/master-user-final-KH5oJn:PASSWORD::"
                },
                {
                    "name": "DJANGO_DB_HOST",
                    "valueFrom": "arn:aws:secretsmanager:us-east-1:498606688292:secret:rr/db/master-user-final-KH5oJn:HOST::"
                },
                {
                    "name": "DJANGO_DB_PORT",
                    "valueFrom": "arn:aws:secretsmanager:us-east-1:498606688292:secret:rr/db/master-user-final-KH5oJn:PORT::"
                }
            ],
            "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                    "awslogs-group": "/ecs/populate-stocks",
                    "awslogs-region": "us-east-1",
                    "awslogs-stream-prefix": "ecs"
                }
            }
        }
    ]
}
