{
    "family": "richesreach-production",
    "taskRoleArn": "arn:aws:iam::498606688292:role/ecsTaskRole",
    "executionRoleArn": "arn:aws:iam::498606688292:role/ecsTaskExecutionRole",
    "networkMode": "awsvpc",
    "requiresCompatibilities": ["FARGATE"],
    "cpu": "512",
    "memory": "1024",
    "containerDefinitions": [
        {
            "name": "richesreach-backend",
            "image": "498606688292.dkr.ecr.us-east-1.amazonaws.com/riches-reach-ai:9f5d93caab53628905a8dd2cc5c8cddc3388efb1",
            "cpu": 0,
            "portMappings": [
                {
                    "containerPort": 8000,
                    "hostPort": 8000,
                    "protocol": "tcp"
                }
            ],
            "essential": true,
            "command": [
                "/bin/sh",
                "-c",
                "pip install fastapi uvicorn httpx python-multipart && cat > crypto_server.py << 'EOF'\n#!/usr/bin/env python3\nfrom fastapi import FastAPI, HTTPException\nfrom fastapi.middleware.cors import CORSMiddleware\nimport uvicorn\nimport os\nimport json\nimport time\nfrom datetime import datetime, timedelta\nfrom typing import Dict, Any\n\napp = FastAPI(title=\"RichesReach Crypto Server\", description=\"Production crypto server for RichesReach\", version=\"1.0.0\")\n\napp.add_middleware(CORSMiddleware, allow_origins=[\"*\"], allow_credentials=True, allow_methods=[\"*\"], allow_headers=[\"*\"])\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Crypto Test Server is running!\", \"status\": \"operational\", \"version\": \"1.0.0\"}\n\n@app.get(\"/health/\")\nasync def health():\n    return {\"ok\": True, \"mode\": \"production\", \"status\": \"healthy\"}\n\n@app.post(\"/graphql/\")\nasync def graphql_endpoint(request: Dict[str, Any]):\n    try:\n        query_str = request.get(\"query\", \"\")\n        variables = request.get(\"variables\", {})\n        \n        print(f\"DEBUG: GraphQL query received: {query_str[:100]}...\")\n        \n        # Handle tutorProgress query\n        if \"tutorProgress\" in query_str:\n            print(\"DEBUG: Processing tutorProgress query\")\n            return {\n                \"data\": {\n                    \"tutorProgress\": {\n                        \"userId\": \"user_123\",\n                        \"xp\": 1250,\n                        \"level\": 3,\n                        \"streakDays\": 7,\n                        \"badges\": [\"first_lesson\", \"crypto_explorer\"],\n                        \"hearts\": 5,\n                        \"maxHearts\": 5,\n                        \"abilityEstimate\": 0.75,\n                        \"skillMastery\": {\n                            \"crypto_trading\": 0.6,\n                            \"stock_trading\": 0.4,\n                            \"risk_management\": 0.5\n                        }\n                    }\n                }\n            }\n        \n        # Handle dailyQuest query\n        if \"dailyQuest\" in query_str:\n            print(\"DEBUG: Processing dailyQuest query\")\n            return {\n                \"data\": {\n                    \"dailyQuest\": {\n                        \"id\": \"quest_daily_001\",\n                        \"title\": \"Daily Learning Challenge\",\n                        \"description\": \"Complete 3 lessons today to earn bonus XP!\",\n                        \"questType\": \"learning\",\n                        \"difficulty\": \"medium\",\n                        \"rewards\": [\n                            {\"type\": \"XP\", \"amount\": 100},\n                            {\"type\": \"BADGE\", \"amount\": 1}\n                        ],\n                        \"progress\": 0.0,\n                        \"target\": 3,\n                        \"current\": 0,\n                        \"expiresAt\": \"2025-01-28T23:59:59Z\",\n                        \"xpReward\": 100,\n                        \"timeLimitMinutes\": 30,\n                        \"requiredSkills\": [\"crypto_trading\", \"stock_trading\"],\n                        \"regimeContext\": \"BULL\",\n                        \"voiceNarration\": \"Welcome to your daily quest! Complete 3 lessons to earn bonus XP!\",\n                        \"completionCriteria\": \"Complete 3 lessons with 80% accuracy\"\n                    }\n                }\n            }\n        \n        # Handle StartLesson mutation\n        if \"startLesson\" in query_str:\n            print(\"DEBUG: Processing StartLesson mutation\")\n            topic = variables.get(\"topic\", \"crypto basics\")\n            print(f\"DEBUG: Topic detected: '{topic}'\")\n            \n            # Crypto basics lesson\n            crypto_lesson = {\n                \"id\": \"lesson_crypto_basics\",\n                \"title\": \"ðŸš€ Crypto Trading Fundamentals\",\n                \"text\": \"\"\"ðŸŽ¯ **What is Cryptocurrency?**\n\nCryptocurrency is digital money that uses cryptography for security. Unlike traditional currencies, crypto operates on decentralized networks called blockchains.\n\n**How Crypto Trading Works:**\n1. **Choose an Exchange** - Platforms like Coinbase, Binance, or Kraken\n2. **Create an Account** - Verify your identity (KYC process)\n3. **Deposit Funds** - Link your bank account or credit card\n4. **Start Trading** - Buy/sell crypto pairs like BTC/USD, ETH/USD\n\n**Key Concepts:**\nâ€¢ **Blockchain**: Distributed ledger technology\nâ€¢ **Wallet**: Digital storage for your crypto\nâ€¢ **Private Key**: Your secret password to access funds\nâ€¢ **Public Key**: Your wallet address (like a bank account number)\nâ€¢ **Mining**: Process of validating transactions\nâ€¢ **DeFi**: Decentralized Finance applications\n\n**Popular Cryptocurrencies:**\nâ€¢ **Bitcoin (BTC)**: Digital gold, store of value\nâ€¢ **Ethereum (ETH)**: Smart contracts platform\nâ€¢ **Binance Coin (BNB)**: Exchange utility token\nâ€¢ **Cardano (ADA)**: Academic approach to blockchain\nâ€¢ **Solana (SOL)**: High-speed blockchain\n\n**Trading Strategies:**\nâ€¢ **HODL**: Buy and hold long-term\nâ€¢ **Day Trading**: Buy/sell within same day\nâ€¢ **DCA**: Dollar Cost Averaging (buy regularly)\nâ€¢ **Swing Trading**: Hold for days/weeks\nâ€¢ **Arbitrage**: Buy low on one exchange, sell high on another\n\n**Risk Management:**\nâœ… Never invest more than you can afford to lose\nâœ… Diversify across multiple cryptocurrencies\nâœ… Use stop-loss orders to limit losses\nâœ… Keep most crypto in cold storage (offline)\nâœ… Research projects before investing\n\n**Getting Started:**\n1. **Start Small** - Begin with $50-100\n2. **Learn First** - Understand the technology\n3. **Choose Reputable Exchanges** - Stick to established platforms\n4. **Secure Your Wallet** - Use hardware wallets for large amounts\n5. **Stay Updated** - Follow crypto news and developments\"\"\",\n                \"voiceNarration\": \"Welcome to crypto trading! Learn how to buy and sell digital currencies.\",\n                \"quiz\": {\n                    \"id\": \"quiz_crypto_basics\",\n                    \"question\": \"What is a blockchain?\",\n                    \"options\": [\"A type of cryptocurrency\", \"A distributed ledger technology\", \"A trading platform\", \"A wallet type\"],\n                    \"correct\": 1,\n                    \"explanation\": \"Correct! Blockchain is the distributed ledger technology that powers cryptocurrencies.\",\n                    \"voiceHint\": \"Think about how transactions are recorded and verified.\"\n                },\n                \"xpEarned\": 50,\n                \"difficulty\": 1,\n                \"estimatedTimeMinutes\": 8,\n                \"skillsTargeted\": [\"crypto_trading\", \"fundamentals\"]\n            }\n            \n            # Stock basics lesson\n            stock_lesson = {\n                \"id\": \"lesson_stock_basics\",\n                \"title\": \"ðŸ“ˆ Stock Trading Fundamentals\",\n                \"text\": \"\"\"ðŸŽ¯ **What is Stock Trading?**\n\nStock trading is buying and selling shares of publicly traded companies. When you buy a stock, you own a small piece of that company!\n\n**How Stock Trading Works:**\n1. **Choose a Broker** - Online platforms like Robinhood, E*TRADE, or TD Ameritrade\n2. **Open an Account** - Link your bank account for deposits\n3. **Research Stocks** - Look at company financials, news, and trends\n4. **Place Orders** - Market orders (immediate) or limit orders (specific price)\n\n**Types of Orders:**\nâ€¢ **Market Order**: Buy/sell immediately at current price\nâ€¢ **Limit Order**: Buy/sell only at your target price\nâ€¢ **Stop Loss**: Automatically sell if price drops below threshold\n\n**Key Concepts:**\nâ€¢ **Shares**: Units of ownership in a company\nâ€¢ **Dividends**: Regular payments some companies make to shareholders\nâ€¢ **Market Cap**: Total value of all company shares\nâ€¢ **P/E Ratio**: Price-to-earnings ratio (valuation metric)\n\n**Real Example:**\nApple (AAPL) at $150 per share:\n- Buy 10 shares = $1,500 investment\n- If AAPL goes to $165: You make $150 profit (10% gain)\n- If AAPL drops to $135: You lose $150 (10% loss)\n\n**Getting Started:**\n1. **Start Small** - Begin with $100-500\n2. **Diversify** - Don't put all money in one stock\n3. **Research First** - Understand what you're buying\n4. **Think Long-term** - Don't panic sell on daily fluctuations\n\n**Pro Tips:**\nâœ… Never invest more than you can afford to lose\nâœ… Use dollar-cost averaging (buy small amounts regularly)\nâœ… Focus on companies you understand\nâœ… Keep emotions out of trading decisions\"\"\",\n                \"voiceNarration\": \"Welcome to stock trading! Learn how to buy and sell shares of companies.\",\n                \"quiz\": {\n                    \"id\": \"quiz_stock_basics\",\n                    \"question\": \"What happens when you buy a stock?\",\n                    \"options\": [\"You lend money to the company\", \"You own a small piece of the company\", \"You become the company's employee\", \"You get guaranteed profits\"],\n                    \"correct\": 1,\n                    \"explanation\": \"Correct! Buying a stock means you own shares and become a partial owner of the company.\",\n                    \"voiceHint\": \"Think about what ownership means when you buy something.\"\n                },\n                \"xpEarned\": 50,\n                \"difficulty\": 1,\n                \"estimatedTimeMinutes\": 7,\n                \"skillsTargeted\": [\"stock_trading\", \"fundamentals\"]\n            }\n            \n            # Return appropriate lesson based on topic\n            if topic == \"crypto basics\":\n                lesson = crypto_lesson\n            elif topic == \"stock basics\":\n                lesson = stock_lesson\n            else:\n                # Default to crypto basics for unknown topics\n                lesson = crypto_lesson\n            \n            return {\n                \"data\": {\n                    \"startLesson\": lesson\n                }\n            }\n        \n        # Handle StartQuest mutation\n        if \"startQuest\" in query_str:\n            print(\"DEBUG: Processing StartQuest mutation\")\n            difficulty = variables.get(\"difficulty\", \"MEDIUM\")\n            \n            # Create a quest session\n            quest_session = {\n                \"id\": f\"quest_{difficulty.lower()}_{int(time.time())}\",\n                \"topic\": \"daily quest\",\n                \"difficulty\": difficulty,\n                \"rewards\": [\n                    {\"type\": \"XP\", \"amount\": 100 if difficulty == \"EASY\" else 150 if difficulty == \"MEDIUM\" else 200},\n                    {\"type\": \"BADGE\", \"amount\": 1}\n                ],\n                \"progress\": 0.0,\n                \"narration\": f\"Welcome to your {difficulty.lower()} daily quest! Complete trading scenarios to earn bonus rewards.\",\n                \"expiresAt\": (datetime.now() + timedelta(hours=24)).isoformat(),\n                \"questType\": \"simulation\",\n                \"scenarios\": [\n                    {\n                        \"id\": \"scenario_1\",\n                        \"title\": \"Crypto Trading Challenge\",\n                        \"description\": \"Practice buying and selling cryptocurrency\",\n                        \"difficulty\": difficulty,\n                        \"xpReward\": 25\n                    },\n                    {\n                        \"id\": \"scenario_2\", \n                        \"title\": \"Stock Trading Challenge\",\n                        \"description\": \"Practice stock market trading\",\n                        \"difficulty\": difficulty,\n                        \"xpReward\": 25\n                    }\n                ],\n                \"timeLimitMinutes\": 30\n            }\n            \n            return {\n                \"data\": {\n                    \"startQuest\": quest_session\n                }\n            }\n        \n        # Handle UpdateQuestProgress mutation\n        if \"updateQuestProgress\" in query_str:\n            print(\"DEBUG: Processing UpdateQuestProgress mutation\")\n            questId = variables.get(\"questId\", \"quest_medium_123\")\n            progress = variables.get(\"progress\", 0.5)\n            \n            return {\n                \"data\": {\n                    \"updateQuestProgress\": {\n                        \"questId\": questId,\n                        \"progress\": progress,\n                        \"completed\": progress >= 1.0,\n                        \"xpEarned\": int(progress * 100)\n                    }\n                }\n            }\n        \n        # Handle me query (must be exact match to avoid conflicts)\n        if \"me {\" in query_str:\n            print(\"DEBUG: Processing me query\")\n            return {\n                \"data\": {\n                    \"me\": {\n                        \"id\": \"user_123\",\n                        \"name\": \"Test User\",\n                        \"email\": \"test@richesreach.com\",\n                        \"username\": \"testuser\",\n                        \"profilePic\": \"https://via.placeholder.com/150\",\n                        \"hasPremiumAccess\": True,\n                        \"subscriptionTier\": \"PREMIUM\",\n                        \"followersCount\": 42,\n                        \"followingCount\": 38,\n                        \"totalTrades\": 156,\n                        \"winRate\": 0.68,\n                        \"totalPnL\": 2847.50,\n                        \"riskTolerance\": \"MODERATE\",\n                        \"tradingStyle\": \"SWING\",\n                        \"experienceLevel\": \"INTERMEDIATE\",\n                        \"preferredAssets\": [\"STOCKS\", \"CRYPTO\"],\n                        \"notificationsEnabled\": True,\n                        \"emailNotifications\": True,\n                        \"pushNotifications\": True,\n                        \"createdAt\": \"2024-01-15T10:30:00Z\",\n                        \"lastLoginAt\": \"2025-01-28T15:00:00Z\"\n                    }\n                }\n            }\n        \n        # Handle portfolioMetrics query (check first to avoid conflicts)\n        if \"portfolioMetrics\" in query_str:\n            print(\"DEBUG: Processing portfolioMetrics query\")\n            return {\n                \"data\": {\n                    \"portfolioMetrics\": {\n                        \"totalValue\": 125847.50,\n                        \"totalCost\": 98000.00,\n                        \"totalReturn\": 27847.50,\n                        \"totalReturnPercent\": 28.42,\n                        \"holdings\": [\n                            {\n                                \"symbol\": \"AAPL\",\n                                \"companyName\": \"Apple Inc.\",\n                                \"shares\": 50,\n                                \"currentPrice\": 185.25,\n                                \"totalValue\": 9262.50,\n                                \"costBasis\": 8500.00,\n                                \"returnAmount\": 762.50,\n                                \"returnPercent\": 8.97,\n                                \"sector\": \"Technology\"\n                            },\n                            {\n                                \"symbol\": \"TSLA\",\n                                \"companyName\": \"Tesla Inc.\",\n                                \"shares\": 25,\n                                \"currentPrice\": 245.80,\n                                \"totalValue\": 6145.00,\n                                \"costBasis\": 5500.00,\n                                \"returnAmount\": 645.00,\n                                \"returnPercent\": 11.73,\n                                \"sector\": \"Automotive\"\n                            },\n                            {\n                                \"symbol\": \"BTC\",\n                                \"companyName\": \"Bitcoin\",\n                                \"shares\": 0.5,\n                                \"currentPrice\": 45000.00,\n                                \"totalValue\": 22500.00,\n                                \"costBasis\": 20000.00,\n                                \"returnAmount\": 2500.00,\n                                \"returnPercent\": 12.50,\n                                \"sector\": \"Cryptocurrency\"\n                            }\n                        ]\n                    }\n                }\n            }\n        \n        # Handle socialFeeds query (check before me to avoid conflicts)\n        if \"socialFeeds\" in query_str:\n            print(\"DEBUG: Processing socialFeeds query\")\n            limit = variables.get(\"limit\", 10)\n            offset = variables.get(\"offset\", 0)\n            return {\n                \"data\": {\n                    \"socialFeeds\": [\n                        {\n                            \"id\": \"feed_1\",\n                            \"user\": {\n                                \"id\": \"user_456\",\n                                \"username\": \"crypto_trader\",\n                                \"profilePic\": \"https://via.placeholder.com/50\",\n                                \"verified\": True\n                            },\n                            \"content\": \"Just made a great trade on ETH! Up 15% this week ðŸš€\",\n                            \"type\": \"TRADE_UPDATE\",\n                            \"likes\": 23,\n                            \"comments\": 8,\n                            \"shares\": 3,\n                            \"createdAt\": \"2025-01-28T14:30:00Z\",\n                            \"tags\": [\"ETH\", \"crypto\", \"trading\"]\n                        },\n                        {\n                            \"id\": \"feed_2\",\n                            \"user\": {\n                                \"id\": \"user_789\",\n                                \"username\": \"stock_guru\",\n                                \"profilePic\": \"https://via.placeholder.com/50\",\n                                \"verified\": False\n                            },\n                            \"content\": \"Market analysis: Tech stocks looking strong for Q1. AAPL, MSFT, GOOGL all showing bullish patterns.\",\n                            \"type\": \"MARKET_ANALYSIS\",\n                            \"likes\": 45,\n                            \"comments\": 12,\n                            \"shares\": 7,\n                            \"createdAt\": \"2025-01-28T13:15:00Z\",\n                            \"tags\": [\"tech\", \"analysis\", \"stocks\"]\n                        }\n                    ]\n                }\n            }\n        \n        # Handle topTraders query\n        if \"topTraders\" in query_str:\n            print(\"DEBUG: Processing topTraders query\")\n            period = variables.get(\"period\", \"week\")\n            return {\n                \"data\": {\n                    \"topTraders\": [\n                        {\n                            \"id\": \"trader_1\",\n                            \"username\": \"crypto_king\",\n                            \"avatar\": \"https://via.placeholder.com/60\",\n                            \"totalReturn\": 45.2,\n                            \"totalTrades\": 89,\n                            \"winRate\": 0.78,\n                            \"followers\": 1250,\n                            \"verified\": True,\n                            \"rank\": 1\n                        },\n                        {\n                            \"id\": \"trader_2\", \n                            \"username\": \"swing_master\",\n                            \"avatar\": \"https://via.placeholder.com/60\",\n                            \"totalReturn\": 38.7,\n                            \"totalTrades\": 67,\n                            \"winRate\": 0.72,\n                            \"followers\": 890,\n                            \"verified\": True,\n                            \"rank\": 2\n                        },\n                        {\n                            \"id\": \"trader_3\",\n                            \"username\": \"day_trader_pro\",\n                            \"avatar\": \"https://via.placeholder.com/60\", \n                            \"totalReturn\": 32.1,\n                            \"totalTrades\": 156,\n                            \"winRate\": 0.68,\n                            \"followers\": 567,\n                            \"verified\": False,\n                            \"rank\": 3\n                        }\n                    ]\n                }\n            }\n        \n        # Handle swingSignals query\n        if \"swingSignals\" in query_str:\n            print(\"DEBUG: Processing swingSignals query\")\n            limit = variables.get(\"limit\", 5)\n            return {\n                \"data\": {\n                    \"swingSignals\": [\n                        {\n                            \"id\": \"signal_1\",\n                            \"symbol\": \"AAPL\",\n                            \"signalType\": \"BUY\",\n                            \"confidence\": 0.85,\n                            \"targetPrice\": 195.00,\n                            \"stopLoss\": 175.00,\n                            \"timeframe\": \"1-2 weeks\",\n                            \"reasoning\": \"Strong earnings beat, bullish technical pattern\",\n                            \"createdAt\": \"2025-01-28T10:00:00Z\"\n                        },\n                        {\n                            \"id\": \"signal_2\",\n                            \"symbol\": \"TSLA\",\n                            \"signalType\": \"SELL\",\n                            \"confidence\": 0.72,\n                            \"targetPrice\": 220.00,\n                            \"stopLoss\": 260.00,\n                            \"timeframe\": \"3-5 days\",\n                            \"reasoning\": \"Overbought conditions, resistance at $250\",\n                            \"createdAt\": \"2025-01-28T09:30:00Z\"\n                        }\n                    ]\n                }\n            }\n        \n        # Handle availableBenchmarks query\n        if \"availableBenchmarks\" in query_str:\n            print(\"DEBUG: Processing availableBenchmarks query\")\n            return {\n                \"data\": {\n                    \"availableBenchmarks\": [\"SPY\", \"QQQ\", \"IWM\", \"VTI\", \"VEA\", \"VWO\"]\n                }\n            }\n        \n        # Handle benchmarkSeries query\n        if \"benchmarkSeries\" in query_str:\n            print(\"DEBUG: Processing benchmarkSeries query\")\n            symbol = variables.get(\"symbol\", \"SPY\")\n            timeframe = variables.get(\"timeframe\", \"1D\")\n            return {\n                \"data\": {\n                    \"benchmarkSeries\": {\n                        \"symbol\": symbol,\n                        \"timeframe\": timeframe,\n                        \"data\": [\n                            {\"timestamp\": \"2025-01-28T09:30:00Z\", \"price\": 485.50},\n                            {\"timestamp\": \"2025-01-28T10:00:00Z\", \"price\": 487.20},\n                            {\"timestamp\": \"2025-01-28T10:30:00Z\", \"price\": 486.80},\n                            {\"timestamp\": \"2025-01-28T11:00:00Z\", \"price\": 488.10},\n                            {\"timestamp\": \"2025-01-28T11:30:00Z\", \"price\": 489.30},\n                            {\"timestamp\": \"2025-01-28T12:00:00Z\", \"price\": 488.90},\n                            {\"timestamp\": \"2025-01-28T12:30:00Z\", \"price\": 490.20},\n                            {\"timestamp\": \"2025-01-28T13:00:00Z\", \"price\": 491.50},\n                            {\"timestamp\": \"2025-01-28T13:30:00Z\", \"price\": 492.10},\n                            {\"timestamp\": \"2025-01-28T14:00:00Z\", \"price\": 491.80}\n                        ]\n                    }\n                }\n            }\n        \n        # Default response for unknown queries\n        return {\n            \"data\": {\n                \"message\": \"Query processed successfully\",\n                \"query\": query_str[:100] + \"...\" if len(query_str) > 100 else query_str\n            }\n        }\n        \n    except Exception as e:\n        print(f\"ERROR: {str(e)}\")\n        return {\n            \"errors\": [{\n                \"message\": str(e),\n                \"locations\": [{\"line\": 1, \"column\": 1}]\n            }]\n        }\n\n@app.get(\"/api/wealth-circles/\")\nasync def get_wealth_circles():\n    return {\n        \"circles\": [\n            {\n                \"id\": \"circle_1\",\n                \"name\": \"Crypto Enthusiasts\",\n                \"description\": \"Learn crypto trading together\",\n                \"memberCount\": 150,\n                \"category\": \"crypto\"\n            },\n            {\n                \"id\": \"circle_2\",\n                \"name\": \"Stock Market Pros\",\n                \"description\": \"Advanced stock trading strategies\",\n                \"memberCount\": 89,\n                \"category\": \"stocks\"\n            }\n        ]\n    }\n\nif __name__ == \"__main__\":\n    port = int(os.getenv(\"PORT\", 8000))\n    print(f\"Starting crypto server on 0.0.0.0:{port}\")\n    uvicorn.run(app, host=\"0.0.0.0\", port=port, log_level=\"info\")\nEOF\npython crypto_server.py"
            ],
            "environment": [
                {
                    "name": "PORT",
                    "value": "8000"
                },
                {
                    "name": "DEBUG",
                    "value": "False"
                },
                {
                    "name": "ENVIRONMENT",
                    "value": "production"
                }
            ],
            "mountPoints": [],
            "volumesFrom": [],
            "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                    "awslogs-group": "/ecs/richesreach-production",
                    "awslogs-region": "us-east-1",
                    "awslogs-stream-prefix": "ecs"
                }
            },
            "healthCheck": {
                "command": [
                    "CMD-SHELL",
                    "curl -fsS http://localhost:8000/health/ || exit 1"
                ],
                "interval": 30,
                "timeout": 5,
                "retries": 3,
                "startPeriod": 10
            },
            "systemControls": []
        }
    ]
}
